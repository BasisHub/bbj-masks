[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/DateMask/DateMask.js",
    "content": "/*\r\n * This file is part of bbj-masks lib.\r\n * (c) Basis Europe <eu@basis.com>\r\n *\r\n * For the full copyright and license information, please view the LICENSE\r\n * file that was distributed with this source code.\r\n */\r\n\r\nimport { utcToZonedTime } from 'date-fns-tz'\r\nimport { getWeekStartByLocale } from 'weekstart'\r\n\r\nconst ASCII_CHARS = /[^\\x20-\\x7E]/g\r\n\r\nconst getDayOfYear = date => {\r\n  const start = new Date(date.getFullYear(), 0, 0)\r\n\r\n  const diff =\r\n    date -\r\n    start +\r\n    (start.getTimezoneOffset() - date.getTimezoneOffset()) * 60 * 1000\r\n  const oneDay = 1000 * 60 * 60 * 24\r\n  const day = Math.floor(diff / oneDay)\r\n\r\n  return day\r\n}\r\n\r\nconst getWeekNumber = function(date, weekStart) {\r\n  const d = new Date(\r\n    Date.UTC(date.getFullYear(), date.getMonth(), date.getDate())\r\n  )\r\n  const dayNum = d.getUTCDay() - (weekStart - 1) || 7\r\n  d.setUTCDate(d.getUTCDate() + 4 - dayNum)\r\n  const yearStart = new Date(Date.UTC(d.getUTCFullYear(), 0, 1))\r\n  return Math.ceil(((d - yearStart) / 86400000 + 1) / 7)\r\n}\r\n\r\n/**\r\n * DateMask\r\n *\r\n * A javascript implementation for BBj dates masking\r\n *\r\n * @author Hyyan Abo Fakher <habofakher@basis.com>\r\n */\r\nclass DateMask {\r\n  /**\r\n   * Mask date\r\n   *\r\n   * Mask the passed date with the passed mask\r\n   *\r\n   * @param {String} date date as a string\r\n   * @param {String} mask mask as a string\r\n   * @param {String} locale the language to use ex(en-US). default is to the system language\r\n   * @param {String} timezone the time zone descriptor (e.g. America/Los_Angeles). default to the system\r\n   *                          timezone\r\n   *\r\n   * @return {String} a date masked with the given mask\r\n   */\r\n  static mask(date, mask, locale, timezone) {\r\n    if (!date) return ''\r\n    if (!mask) return date\r\n\r\n    timezone = timezone || Intl.DateTimeFormat().resolvedOptions().timeZone\r\n    locale = locale || Intl.DateTimeFormat().resolvedOptions().locale || 'en-US'\r\n\r\n    // check time\r\n    if (\r\n      /^(2[0-3]|[01][0-9]):?([0-5][0-9]):?([0-5][0-9])(Z|[+-](?:2[0-3]|[01][0-9])(?::?(?:[0-5][0-9]))?)$/.test(\r\n        date\r\n      )\r\n    ) {\r\n      date = `1970-01-01T${date}`\r\n    }\r\n\r\n    const dateObject = utcToZonedTime(date, timezone)\r\n    const translation = DateMask._buildTranslation({\r\n      year: dateObject.getFullYear(),\r\n      month: dateObject.getMonth() + 1,\r\n      monthShort: new Intl.DateTimeFormat([locale], { month: 'short' })\r\n        .format(dateObject)\r\n        .replace(ASCII_CHARS, ''),\r\n      monthLong: new Intl.DateTimeFormat([locale], { month: 'long' })\r\n        .format(dateObject)\r\n        .replace(ASCII_CHARS, ''),\r\n      day: dateObject.getDate(),\r\n      dayShort: new Intl.DateTimeFormat([locale], { weekday: 'short' })\r\n        .format(dateObject)\r\n        .replace(ASCII_CHARS, ''),\r\n      dayLong: new Intl.DateTimeFormat([locale], { weekday: 'long' })\r\n        .format(dateObject)\r\n        .replace(ASCII_CHARS, ''),\r\n      minutes: dateObject.getMinutes(),\r\n      seconds: dateObject.getSeconds(),\r\n      get hours24() {\r\n        return dateObject.getHours()\r\n      },\r\n      get hours12() {\r\n        return this.hours24 % 12 || 12\r\n      },\r\n      dayOfYear: getDayOfYear(dateObject),\r\n      dayOfWeek: dateObject.getDay() + 1, // Sunday = 1 in BBj but Sunday = 0 in JS\r\n      weekNumber: getWeekNumber(dateObject, getWeekStartByLocale(locale)),\r\n      locale,\r\n      timezone\r\n    })\r\n\r\n    let result = mask\r\n    for (var k in translation) {\r\n      result = result.replace(new RegExp('(%' + k + ')', 'g'), translation[k])\r\n    }\r\n\r\n    return result\r\n  }\r\n\r\n  /**\r\n   * Get a map object which contains all possible forms of masks\r\n   *\r\n   * @param {Object} dateDetails date\r\n   *\r\n   * @return {Object} forms masks\r\n   */\r\n  static _buildTranslation(dateDetails) {\r\n    return {\r\n      // year\r\n      Yz: dateDetails.year.toString().substr(-2),\r\n      Ys: dateDetails.year,\r\n      Yl: dateDetails.year,\r\n      Yp: String.fromCharCode(dateDetails.year),\r\n      Yd: dateDetails.year,\r\n      Y: dateDetails.year,\r\n\r\n      // month\r\n      Mz:\r\n        String(dateDetails.month).length == 1\r\n          ? '0' + dateDetails.month\r\n          : dateDetails.month,\r\n      Ms: dateDetails.monthShort,\r\n      Ml: dateDetails.monthLong,\r\n      Mp: String.fromCharCode(dateDetails.month),\r\n      Md: dateDetails.month,\r\n      M: dateDetails.month,\r\n\r\n      // day\r\n      Dz:\r\n        String(dateDetails.day).length == 1\r\n          ? '0' + dateDetails.day\r\n          : dateDetails.day,\r\n      Ds: dateDetails.dayShort,\r\n      Dl: dateDetails.dayLong,\r\n      Dp: String.fromCharCode(dateDetails.day),\r\n      Dd: dateDetails.day,\r\n      D: dateDetails.day,\r\n\r\n      // hour 24\r\n      Hz:\r\n        String(dateDetails.hours24).length == 1\r\n          ? '0' + dateDetails.hours24\r\n          : dateDetails.hours24,\r\n      Hs: dateDetails.hours24,\r\n      Hl: dateDetails.hours24,\r\n      Hp: String.fromCharCode(dateDetails.hours24),\r\n      Hd: dateDetails.hours24,\r\n      H: dateDetails.hours24,\r\n\r\n      // hour 12\r\n      hz:\r\n        String(dateDetails.hours12).length == 1\r\n          ? '0' + dateDetails.hours12\r\n          : dateDetails.hours12,\r\n      hs: dateDetails.hours12,\r\n      hl: dateDetails.hours12,\r\n      hp: String.fromCharCode(dateDetails.hours12),\r\n      hd: dateDetails.hours12,\r\n      h: dateDetails.hours12,\r\n\r\n      // minutes\r\n      mz:\r\n        String(dateDetails.minutes).length == 1\r\n          ? '0' + dateDetails.minutes\r\n          : dateDetails.minutes,\r\n      ms: dateDetails.minutes,\r\n      ml: dateDetails.minutes,\r\n      mp: String.fromCharCode(dateDetails.minutes),\r\n      md: dateDetails.minutes,\r\n      m: dateDetails.minutes,\r\n\r\n      // seconds\r\n      sz:\r\n        String(dateDetails.seconds).length == 1\r\n          ? '0' + dateDetails.seconds\r\n          : dateDetails.seconds,\r\n      ss: dateDetails.seconds,\r\n      sl: dateDetails.seconds,\r\n      sp: String.fromCharCode(dateDetails.seconds),\r\n      sd: dateDetails.seconds,\r\n      s: dateDetails.seconds,\r\n\r\n      // AM , PM\r\n      PP: dateDetails.hours24 > 12 ? 'PM' : 'PM',\r\n      P: dateDetails.hours24 > 12 ? 'PM' : 'AM',\r\n      pp: dateDetails.hours24 > 12 ? 'pm' : 'am',\r\n      p: dateDetails.hours24 > 12 ? 'pm' : 'am',\r\n\r\n      // Day of Year\r\n      Jz:\r\n        String(dateDetails.dayOfYear).length == 1\r\n          ? '0' + dateDetails.dayOfYear\r\n          : dateDetails.dayOfYear,\r\n      Js: dateDetails.dayOfYear,\r\n      Jl: dateDetails.dayOfYear,\r\n      Jd: dateDetails.dayOfYear,\r\n      J: dateDetails.dayOfYear,\r\n\r\n      // Day Of Week\r\n      Wz:\r\n        String(dateDetails.dayOfWeek).length == 1\r\n          ? '0' + dateDetails.dayOfWeek\r\n          : dateDetails.dayOfWeek,\r\n      Ws: dateDetails.dayOfWeek,\r\n      Wl: dateDetails.dayOfWeek,\r\n      Wp: String.fromCharCode(dateDetails.dayOfWeek),\r\n      Wd: dateDetails.dayOfWeek,\r\n      W: dateDetails.dayOfWeek,\r\n\r\n      // week number\r\n      wz:\r\n        String(dateDetails.weekNumber).length == 1\r\n          ? '0' + dateDetails.weekNumber\r\n          : dateDetails.weekNumber,\r\n      ws: dateDetails.weekNumber,\r\n      wl: dateDetails.weekNumber,\r\n      wp: String.fromCharCode(dateDetails.weekNumber),\r\n      wd: dateDetails.weekNumber,\r\n      w: dateDetails.weekNumber\r\n    }\r\n  }\r\n}\r\n\r\nexport default DateMask\r\n",
    "static": true,
    "longname": "/mnt/d/Gitlab/bbj-masks/src/DateMask/DateMask.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "variable",
    "name": "ASCII_CHARS",
    "memberof": "src/DateMask/DateMask.js",
    "static": true,
    "longname": "src/DateMask/DateMask.js~ASCII_CHARS",
    "access": "public",
    "export": false,
    "importPath": "bbj-masks/src/DateMask/DateMask.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "undefined"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 50,
    "kind": "function",
    "name": "getDayOfYear",
    "memberof": "src/DateMask/DateMask.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/DateMask/DateMask.js~getDayOfYear",
    "access": "public",
    "export": false,
    "importPath": "bbj-masks/src/DateMask/DateMask.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "params": [
      {
        "name": "date",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 51,
    "kind": "function",
    "name": "getWeekNumber",
    "memberof": "src/DateMask/DateMask.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/DateMask/DateMask.js~getWeekNumber",
    "access": "public",
    "export": false,
    "importPath": "bbj-masks/src/DateMask/DateMask.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "params": [
      {
        "name": "date",
        "types": [
          "*"
        ]
      },
      {
        "name": "weekStart",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 52,
    "kind": "class",
    "name": "DateMask",
    "memberof": "src/DateMask/DateMask.js",
    "static": true,
    "longname": "src/DateMask/DateMask.js~DateMask",
    "access": "public",
    "export": true,
    "importPath": "bbj-masks/src/DateMask/DateMask.js",
    "importStyle": "DateMask",
    "description": "DateMask\n\nA javascript implementation for BBj dates masking",
    "lineNumber": 44,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Hyyan Abo Fakher <habofakher@basis.com>"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 53,
    "kind": "method",
    "name": "mask",
    "memberof": "src/DateMask/DateMask.js~DateMask",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/DateMask/DateMask.js~DateMask.mask",
    "access": "public",
    "description": "Mask date\n\nMask the passed date with the passed mask",
    "lineNumber": 58,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "date",
        "description": "date as a string"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "mask",
        "description": "mask as a string"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "locale",
        "description": "the language to use ex(en-US). default is to the system language"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "timezone",
        "description": "the time zone descriptor (e.g. America/Los_Angeles). default to the system\n                         timezone"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "a date masked with the given mask"
    }
  },
  {
    "__docId__": 54,
    "kind": "method",
    "name": "_buildTranslation",
    "memberof": "src/DateMask/DateMask.js~DateMask",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/DateMask/DateMask.js~DateMask._buildTranslation",
    "access": "private",
    "description": "Get a map object which contains all possible forms of masks",
    "lineNumber": 121,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "dateDetails",
        "description": "date"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "forms masks"
    },
    "ignore": true
  },
  {
    "__docId__": 55,
    "kind": "file",
    "name": "src/DateMask/index.js",
    "content": "/*\r\n * This file is part of bbj-masks lib.\r\n * (c) Basis Europe <eu@basis.com>\r\n *\r\n * For the full copyright and license information, please view the LICENSE\r\n * file that was distributed with this source code.\r\n */\r\n\r\nimport DateMask from './DateMask'\r\n\r\nexport default DateMask\r\n",
    "static": true,
    "longname": "/mnt/d/Gitlab/bbj-masks/src/DateMask/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 56,
    "kind": "file",
    "name": "src/NumberMask/NumberMask.js",
    "content": "/*\r\n * This file is part of bbj-masks lib.\r\n * (c) Basis Europe <eu@basis.com>\r\n *\r\n * For the full copyright and license information, please view the LICENSE\r\n * file that was distributed with this source code.\r\n */\r\n\r\n/**\r\n * NumberMask\r\n *\r\n * A javascript implementation for BBj numbers masking \r\n *\r\n * @author Hyyan Abo Fakher <habofakher@basis.com>\r\n */\r\nclass NumberMask {\r\n  /**\r\n   * Mask the given number with the given mask according to BBj rules\r\n   *\r\n   * @param {Number} number the number to format\r\n   * @param {String} mask the mask to use for formatting\r\n   * @param {String} groupingSeparator a char which will be used as a grouping separator\r\n   * @param {String} decimalSeparator a char which will be used as a decimal separator\r\n   *\r\n   * @returns {String} the masked number\r\n   */\r\n  static mask(number, mask, groupingSeparator = ',', decimalSeparator = '.') {\r\n    const maskLength = mask.length\r\n    if (0 === maskLength) return number\r\n\r\n    // Get magnitude and precision of MASK\r\n    let maskBeforeDecimal = 0\r\n    let maskAfterDecimal = 0\r\n    let foundDecimal = false\r\n    for (let i = 0; i < maskLength; ++i) {\r\n      const m = mask.charAt(i)\r\n      if (m == '0' || m == '#') {\r\n        if (foundDecimal) ++maskAfterDecimal\r\n        else ++maskBeforeDecimal\r\n      } else if (m == '.') foundDecimal = true\r\n    }\r\n\r\n    let num = NumberMask._round(number, maskAfterDecimal)\r\n    let digits = NumberMask._toCharArray(num)\r\n\r\n    // Get magnitude and precision of NUMBER\r\n    let numLen = digits.length\r\n    let numBeforeDecimal = 0\r\n    let numAfterDecimal = 0\r\n    foundDecimal = false\r\n    for (let i = 0; i < numLen; i++) {\r\n      if (digits[i] == '.') foundDecimal = true\r\n      else {\r\n        if (foundDecimal) ++numAfterDecimal\r\n        else ++numBeforeDecimal\r\n      }\r\n    }\r\n\r\n    // always ignore mask overflow\r\n    if (numBeforeDecimal > maskBeforeDecimal) return number.toString()\r\n\r\n    // round if mask is for a lower precision number\r\n    if (numAfterDecimal > maskAfterDecimal) {\r\n      num = NumberMask._round(num, maskAfterDecimal)\r\n      digits = NumberMask._toCharArray(num)\r\n      numLen = digits.length\r\n\r\n      // Get new magnitude and precision of NUMBER\r\n      numBeforeDecimal = 0\r\n      numAfterDecimal = 0\r\n      foundDecimal = false\r\n      for (let i = 0; i < numLen; i++) {\r\n        if (digits[i] == '.') foundDecimal = true\r\n        else {\r\n          if (foundDecimal) ++numAfterDecimal\r\n          else ++numBeforeDecimal\r\n        }\r\n      }\r\n\r\n      // always ignore mask overflow\r\n      if (numBeforeDecimal > maskBeforeDecimal) {\r\n        return number.toString()\r\n      }\r\n    }\r\n\r\n    const isNegative = NumberMask._getSign(num) === -1\r\n    let emitDecimal = numLen > 0 || mask.indexOf('0') >= 0\r\n    let foundZero = false\r\n    let currency = false\r\n    let buffer = ''\r\n    foundDecimal = false\r\n\r\n    for (let numPos = 0, maskPos = 0; maskPos < maskLength; maskPos++) {\r\n      let m = mask.charAt(maskPos)\r\n      switch (m) {\r\n        case '0':\r\n          --maskBeforeDecimal\r\n          if (maskBeforeDecimal < numBeforeDecimal && numPos < numLen) {\r\n            buffer += digits[numPos]\r\n            ++numPos\r\n          } else {\r\n            buffer += '0'\r\n            foundZero = true\r\n          }\r\n          break\r\n\r\n        case '#':\r\n          --maskBeforeDecimal\r\n          if (maskBeforeDecimal < numBeforeDecimal && numPos < numLen) {\r\n            buffer += digits[numPos]\r\n            ++numPos\r\n          } else {\r\n            if (foundDecimal) buffer += '0'\r\n          }\r\n          break\r\n\r\n        case ',':\r\n          if (foundZero || numPos > 0) buffer += groupingSeparator\r\n          break\r\n\r\n        case '-':\r\n        case '(':\r\n        case ')':\r\n          if (isNegative) buffer += m\r\n          break\r\n\r\n        case '+':\r\n          buffer += isNegative ? '-' : '+'\r\n          break\r\n\r\n        case '.':\r\n          if (foundDecimal) buffer += m\r\n          else {\r\n            if (emitDecimal) buffer += decimalSeparator\r\n            foundDecimal = true\r\n            ++numPos\r\n          }\r\n          break\r\n\r\n        case 'C':\r\n          if (maskPos < maskLength - 1 && mask.charAt(maskPos + 1) == 'R') {\r\n            if (isNegative) buffer += 'CR'\r\n            ++maskPos\r\n          } else buffer += m\r\n          break\r\n\r\n        case 'D':\r\n          if (maskPos < maskLength - 1 && p_mask.charAt(maskPos + 1) == 'R') {\r\n            buffer += isNegative ? 'CR' : 'DR'\r\n            ++maskPos\r\n          } else buffer += m\r\n          break\r\n\r\n        case 'B':\r\n          buffer += ' '\r\n          break\r\n\r\n        default:\r\n          buffer += m\r\n          break\r\n      }\r\n    }\r\n\r\n    return buffer\r\n  }\r\n\r\n  static _shift(number, precision, reverseShift) {\r\n    if (reverseShift) precision = -precision\r\n    var numArray = ('' + number).split('e')\r\n    return +(\r\n      numArray[0] +\r\n      'e' +\r\n      (numArray[1] ? +numArray[1] + precision : precision)\r\n    )\r\n  }\r\n\r\n  static _round(number, precision) {\r\n    return NumberMask._shift(\r\n      Math.round(NumberMask._shift(number, precision, false)),\r\n      precision,\r\n      true\r\n    )\r\n  }\r\n\r\n  static _toCharArray(number) {\r\n    const signum = NumberMask._getSign(number)\r\n    let chars = []\r\n\r\n    if (signum !== 0) {\r\n      let string = signum < 0 ? `${-1 * number.toString()}` : number.toString()\r\n\r\n      if (string.length > 1 && string.charAt(0) == '0')\r\n        string = string.substring(1)\r\n\r\n      // The string contains only [0-9] and '.'\r\n      chars = string.split('')\r\n    }\r\n\r\n    return chars\r\n  }\r\n\r\n  /**\r\n   * Returns the sign of a number\r\n   *\r\n   * @param {Number} x number\r\n   * @returns {Number} A number representing the sign of the given argument.\r\n   *                   If the argument is a positive number, negative number, positive zero\r\n   *                   or negative zero, the function will return 1, -1, 0 or -0 respectively.\r\n   *                   Otherwise, NaN is returned.\r\n   */\r\n  static _getSign(x) {\r\n    return (x > 0) - (x < 0) || +x\r\n  }\r\n}\r\n\r\nexport default NumberMask",
    "static": true,
    "longname": "/mnt/d/Gitlab/bbj-masks/src/NumberMask/NumberMask.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 57,
    "kind": "class",
    "name": "NumberMask",
    "memberof": "src/NumberMask/NumberMask.js",
    "static": true,
    "longname": "src/NumberMask/NumberMask.js~NumberMask",
    "access": "public",
    "export": true,
    "importPath": "bbj-masks/src/NumberMask/NumberMask.js",
    "importStyle": "NumberMask",
    "description": "NumberMask\n\nA javascript implementation for BBj numbers masking ",
    "lineNumber": 16,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Hyyan Abo Fakher <habofakher@basis.com>"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 58,
    "kind": "method",
    "name": "mask",
    "memberof": "src/NumberMask/NumberMask.js~NumberMask",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/NumberMask/NumberMask.js~NumberMask.mask",
    "access": "public",
    "description": "Mask the given number with the given mask according to BBj rules",
    "lineNumber": 27,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{String} the masked number"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": "the number to format"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "mask",
        "description": "the mask to use for formatting"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "groupingSeparator",
        "description": "a char which will be used as a grouping separator"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "decimalSeparator",
        "description": "a char which will be used as a decimal separator"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "the masked number"
    }
  },
  {
    "__docId__": 59,
    "kind": "method",
    "name": "_shift",
    "memberof": "src/NumberMask/NumberMask.js~NumberMask",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/NumberMask/NumberMask.js~NumberMask._shift",
    "access": "private",
    "description": null,
    "lineNumber": 167,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "number",
        "types": [
          "*"
        ]
      },
      {
        "name": "precision",
        "types": [
          "*"
        ]
      },
      {
        "name": "reverseShift",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 60,
    "kind": "method",
    "name": "_round",
    "memberof": "src/NumberMask/NumberMask.js~NumberMask",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/NumberMask/NumberMask.js~NumberMask._round",
    "access": "private",
    "description": null,
    "lineNumber": 177,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "number",
        "types": [
          "*"
        ]
      },
      {
        "name": "precision",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 61,
    "kind": "method",
    "name": "_toCharArray",
    "memberof": "src/NumberMask/NumberMask.js~NumberMask",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/NumberMask/NumberMask.js~NumberMask._toCharArray",
    "access": "private",
    "description": null,
    "lineNumber": 185,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "number",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 62,
    "kind": "method",
    "name": "_getSign",
    "memberof": "src/NumberMask/NumberMask.js~NumberMask",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/NumberMask/NumberMask.js~NumberMask._getSign",
    "access": "private",
    "description": "Returns the sign of a number",
    "lineNumber": 211,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Number} A number representing the sign of the given argument.\n                  If the argument is a positive number, negative number, positive zero\n                  or negative zero, the function will return 1, -1, 0 or -0 respectively.\n                  Otherwise, NaN is returned."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "number"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "A number representing the sign of the given argument.\n                  If the argument is a positive number, negative number, positive zero\n                  or negative zero, the function will return 1, -1, 0 or -0 respectively.\n                  Otherwise, NaN is returned."
    },
    "ignore": true
  },
  {
    "__docId__": 63,
    "kind": "file",
    "name": "src/NumberMask/index.js",
    "content": "/*\r\n * This file is part of bbj-masks lib.\r\n * (c) Basis Europe <eu@basis.com>\r\n *\r\n * For the full copyright and license information, please view the LICENSE\r\n * file that was distributed with this source code.\r\n */\r\n\r\nimport NumberMask from './NumberMask'\r\n\r\nexport default NumberMask\r\n",
    "static": true,
    "longname": "/mnt/d/Gitlab/bbj-masks/src/NumberMask/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 64,
    "kind": "file",
    "name": "src/StringMask/StringMask.js",
    "content": "/*\r\n * This file is part of bbj-masks lib.\r\n * (c) Basis Europe <eu@basis.com>\r\n *\r\n * For the full copyright and license information, please view the LICENSE\r\n * file that was distributed with this source code.\r\n */\r\n\r\nconst isNumberRegex = /^\\d+$/\r\nconst isWhitespaceRegex = /\\s/\r\nconst punctuationList = '!\"#$%&\\'()*+,-./:;<=>?@[]^_`{|}~'\r\n\r\n/**\r\n * Check if the given string is in lower case\r\n *\r\n * @param {String} str\r\n */\r\nconst isLowerCase = str => {\r\n  return str == str.toLowerCase() && str != str.toUpperCase()\r\n}\r\n\r\n/**\r\n * Check if the given string is in upper case\r\n *\r\n * @param {String} str\r\n */\r\nconst isUpperCase = str => {\r\n  return str == str.toUpperCase() && str != str.toLowerCase()\r\n}\r\n\r\n/**\r\n * NumberMask\r\n *\r\n * A javascript implementation for BBj numbers masking\r\n *\r\n * @author Hyyan Abo Fakher <habofakher@basis.com>\r\n */\r\nclass StringMask {\r\n  /**\r\n   * Mask the given string with the given mask according to BBj rules\r\n   *\r\n   * @param {String} str the string to mask\r\n   * @param {String} mask the mask to use for formatting\r\n   *\r\n   * @returns {String} the masked string\r\n   */\r\n  static mask(str, mask) {\r\n    str = String(str)\r\n    mask = String(mask)\r\n    const maskLen = mask.length\r\n    const strLen = str.length\r\n\r\n    if (strLen > maskLen) return str // friendly silent fail\r\n\r\n    const result = new Array(maskLen)\r\n    let strPos = 0 // to keep track of the current position in the str\r\n    let maskByte = ''\r\n    let strByte = ''\r\n\r\n    for (let i = 0; i < maskLen; i++) {\r\n      maskByte = mask.charAt(i)\r\n      strByte = str.charAt(strPos)\r\n      switch (maskByte) {\r\n        case 'X': // match any character\r\n          result[i] = strPos < strLen ? strByte : ' '\r\n          ++strPos\r\n          break\r\n\r\n        case 'A': // match letter; force upper case\r\n          result[i] =\r\n            strPos < strLen && (isLowerCase(strByte) || isUpperCase(strByte))\r\n              ? strByte.toUpperCase() // force upper case\r\n              : ' '\r\n          ++strPos\r\n          break\r\n\r\n        case 'a': // match letter\r\n          result[i] =\r\n            strPos < strLen && (isLowerCase(strByte) || isUpperCase(strByte))\r\n              ? strByte\r\n              : ' '\r\n          ++strPos\r\n          break\r\n        case '0': // match digit\r\n          result[i] =\r\n            strPos < strLen && isNumberRegex.test(strByte) ? strByte : ' '\r\n          ++strPos\r\n          break\r\n        case 'Z': // match letter or digit; force upper case\r\n          result[i] =\r\n            strPos < strLen &&\r\n            (isNumberRegex.test(strByte) ||\r\n              isLowerCase(strByte) ||\r\n              isUpperCase(strByte))\r\n              ? strByte.toUpperCase() // force upper case\r\n              : ' '\r\n          ++strPos\r\n          break\r\n        case 'z': // match letter or digit\r\n          result[i] =\r\n            strPos < strLen &&\r\n            (isNumberRegex.test(strByte) ||\r\n              isLowerCase(strByte) ||\r\n              isUpperCase(strByte))\r\n              ? strByte\r\n              : ' '\r\n          ++strPos\r\n          break\r\n        case 'U': // match letter (force upper case), digit, whitespace or punctuation.\r\n          if (isLowerCase(strByte)) {\r\n            result[i] = strByte.toUpperCase()\r\n          } else if (\r\n            isUpperCase(strByte) ||\r\n            isNumberRegex.test(strByte) ||\r\n            isWhitespaceRegex.test(strByte) ||\r\n            punctuationList.indexOf(strByte) > -1\r\n          ) {\r\n            result[i] = strByte\r\n          } else {\r\n            result[i] = ' '\r\n          }\r\n          ++strPos\r\n          break\r\n        default:\r\n            result[i] = maskByte\r\n          break\r\n      }\r\n    }\r\n\r\n    return result.join('')\r\n  }\r\n}\r\n\r\nexport default StringMask\r\n",
    "static": true,
    "longname": "/mnt/d/Gitlab/bbj-masks/src/StringMask/StringMask.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 65,
    "kind": "variable",
    "name": "isNumberRegex",
    "memberof": "src/StringMask/StringMask.js",
    "static": true,
    "longname": "src/StringMask/StringMask.js~isNumberRegex",
    "access": "public",
    "export": false,
    "importPath": "bbj-masks/src/StringMask/StringMask.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "undefined"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 66,
    "kind": "variable",
    "name": "isWhitespaceRegex",
    "memberof": "src/StringMask/StringMask.js",
    "static": true,
    "longname": "src/StringMask/StringMask.js~isWhitespaceRegex",
    "access": "public",
    "export": false,
    "importPath": "bbj-masks/src/StringMask/StringMask.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "undefined"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 67,
    "kind": "variable",
    "name": "punctuationList",
    "memberof": "src/StringMask/StringMask.js",
    "static": true,
    "longname": "src/StringMask/StringMask.js~punctuationList",
    "access": "public",
    "export": false,
    "importPath": "bbj-masks/src/StringMask/StringMask.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 68,
    "kind": "function",
    "name": "isLowerCase",
    "memberof": "src/StringMask/StringMask.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/StringMask/StringMask.js~isLowerCase",
    "access": "public",
    "export": false,
    "importPath": "bbj-masks/src/StringMask/StringMask.js",
    "importStyle": null,
    "description": "Check if the given string is in lower case",
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "str",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 69,
    "kind": "function",
    "name": "isUpperCase",
    "memberof": "src/StringMask/StringMask.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/StringMask/StringMask.js~isUpperCase",
    "access": "public",
    "export": false,
    "importPath": "bbj-masks/src/StringMask/StringMask.js",
    "importStyle": null,
    "description": "Check if the given string is in upper case",
    "lineNumber": 27,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "str",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 70,
    "kind": "class",
    "name": "StringMask",
    "memberof": "src/StringMask/StringMask.js",
    "static": true,
    "longname": "src/StringMask/StringMask.js~StringMask",
    "access": "public",
    "export": true,
    "importPath": "bbj-masks/src/StringMask/StringMask.js",
    "importStyle": "StringMask",
    "description": "NumberMask\n\nA javascript implementation for BBj numbers masking",
    "lineNumber": 38,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Hyyan Abo Fakher <habofakher@basis.com>"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 71,
    "kind": "method",
    "name": "mask",
    "memberof": "src/StringMask/StringMask.js~StringMask",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/StringMask/StringMask.js~StringMask.mask",
    "access": "public",
    "description": "Mask the given string with the given mask according to BBj rules",
    "lineNumber": 47,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{String} the masked string"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "str",
        "description": "the string to mask"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "mask",
        "description": "the mask to use for formatting"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "the masked string"
    }
  },
  {
    "__docId__": 72,
    "kind": "file",
    "name": "src/StringMask/index.js",
    "content": "/*\r\n * This file is part of bbj-masks lib.\r\n * (c) Basis Europe <eu@basis.com>\r\n *\r\n * For the full copyright and license information, please view the LICENSE\r\n * file that was distributed with this source code.\r\n */\r\n\r\nimport StringMask from './StringMask'\r\n\r\nexport default StringMask\r\n",
    "static": true,
    "longname": "/mnt/d/Gitlab/bbj-masks/src/StringMask/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 73,
    "kind": "file",
    "name": "src/Types/Types.js",
    "content": "/*\r\n * This file is part of bbj-masks lib.\r\n * (c) Basis Europe <eu@basis.com>\r\n *\r\n * For the full copyright and license information, please view the LICENSE\r\n * file that was distributed with this source code.\r\n */\r\n\r\nimport NumberMask from '../NumberMask'\r\nimport DateMask from '../DateMask'\r\nimport StringMask from '../StringMask'\r\n\r\n/**\r\n * Types\r\n *\r\n * BBj masks factory\r\n *\r\n * @author Hyyan Abo Fakher <habofakher@basis.com>\r\n */\r\nclass Types {\r\n  /**\r\n   * Mask a number according to bbj masking rules\r\n   *\r\n   * @param {Number} number the number to format\r\n   * @param {String} mask the mask to use\r\n   * @param {String} groupingSeparator a char which will be used as a grouping separator\r\n   * @param {String} decimalSeparator a char which will be used as a decimal separator\r\n   *\r\n   * @return {String} number masked with the given mask\r\n   */\r\n  static number(number, mask, groupingSeparator = ',', decimalSeparator = '.') {\r\n    return NumberMask.mask(number, mask, groupingSeparator, decimalSeparator)\r\n  }\r\n\r\n  /**\r\n   * Mask a date according to bbj masking rules\r\n   *\r\n   * @param {String} date date as a string\r\n   * @param {String} mask mask as a string\r\n   * @param {String} locale the language to use ex(en-US). default is to the system language\r\n   * @param {String} timezone the time zone descriptor (e.g. America/Los_Angeles). default to the system\r\n   *                          timezone\r\n   *\r\n   * @return {String} number masked with the given mask\r\n   */\r\n  static date(date, mask, locale, timezone) {\r\n    return DateMask.mask(date, mask, locale, timezone)\r\n  }\r\n\r\n  /**\r\n   * Mask the given string with the given mask according to BBj rules\r\n   *\r\n   * @param {String} str the string to mask\r\n   * @param {String} mask the mask to use for formatting\r\n   *\r\n   * @returns {String} the masked string\r\n   */\r\n  static string(str, mask) {\r\n    return StringMask.mask(str, mask)\r\n  }\r\n}\r\n\r\nexport default Types\r\n",
    "static": true,
    "longname": "/mnt/d/Gitlab/bbj-masks/src/Types/Types.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 74,
    "kind": "class",
    "name": "Types",
    "memberof": "src/Types/Types.js",
    "static": true,
    "longname": "src/Types/Types.js~Types",
    "access": "public",
    "export": true,
    "importPath": "bbj-masks/src/Types/Types.js",
    "importStyle": "Types",
    "description": "Types\n\nBBj masks factory",
    "lineNumber": 20,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Hyyan Abo Fakher <habofakher@basis.com>"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 75,
    "kind": "method",
    "name": "number",
    "memberof": "src/Types/Types.js~Types",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Types/Types.js~Types.number",
    "access": "public",
    "description": "Mask a number according to bbj masking rules",
    "lineNumber": 31,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": "the number to format"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "mask",
        "description": "the mask to use"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "groupingSeparator",
        "description": "a char which will be used as a grouping separator"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "decimalSeparator",
        "description": "a char which will be used as a decimal separator"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "number masked with the given mask"
    }
  },
  {
    "__docId__": 76,
    "kind": "method",
    "name": "date",
    "memberof": "src/Types/Types.js~Types",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Types/Types.js~Types.date",
    "access": "public",
    "description": "Mask a date according to bbj masking rules",
    "lineNumber": 46,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "date",
        "description": "date as a string"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "mask",
        "description": "mask as a string"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "locale",
        "description": "the language to use ex(en-US). default is to the system language"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "timezone",
        "description": "the time zone descriptor (e.g. America/Los_Angeles). default to the system\n                         timezone"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "number masked with the given mask"
    }
  },
  {
    "__docId__": 77,
    "kind": "method",
    "name": "string",
    "memberof": "src/Types/Types.js~Types",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Types/Types.js~Types.string",
    "access": "public",
    "description": "Mask the given string with the given mask according to BBj rules",
    "lineNumber": 58,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{String} the masked string"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "str",
        "description": "the string to mask"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "mask",
        "description": "the mask to use for formatting"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "the masked string"
    }
  },
  {
    "__docId__": 78,
    "kind": "file",
    "name": "src/Types/index.js",
    "content": "/*\r\n * This file is part of bbj-masks lib.\r\n * (c) Basis Europe <eu@basis.com>\r\n *\r\n * For the full copyright and license information, please view the LICENSE\r\n * file that was distributed with this source code.\r\n */\r\n\r\nimport Types from './Types'\r\n\r\nexport default Types\r\n",
    "static": true,
    "longname": "/mnt/d/Gitlab/bbj-masks/src/Types/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 79,
    "kind": "file",
    "name": "src/index.js",
    "content": "/*\n * This file is part of bbj-masks lib.\n * (c) Basis Europe <eu@basis.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport NumberMask from './NumberMask'\nimport DateMask from './DateMask'\nimport StringMask from './StringMask'\nimport Types from './Types'\n\nexport { NumberMask, DateMask, StringMask, Types }\n",
    "static": true,
    "longname": "/mnt/d/Gitlab/bbj-masks/src/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "kind": "index",
    "content": "# BBj Masks\n\n![GitHub](https://img.shields.io/github/license/BasisHub/bbj-masks)\n![GitHub file size in bytes](https://img.shields.io/github/size/BasisHub/bbj-masks/dist/bbj-masks.min.js)\n![GitHub tag (latest by date)](https://img.shields.io/github/v/tag/BasisHub/bbj-masks)\n![David](https://img.shields.io/david/BasisHub/bbj-masks)\n\nA small library to format Javascript Dates , Numbers & Strings using BBj supported masks.\n\n## Browsers support\n\n|[<img src=\"https://raw.githubusercontent.com/alrra/browser-logos/master/src/edge/edge_48x48.png\" alt=\"IE / Edge\" width=\"24px\" height=\"24px\" />](http://godban.github.io/browsers-support-badges/)<br>IE / Edge | [<img src=\"https://raw.githubusercontent.com/alrra/browser-logos/master/src/firefox/firefox_48x48.png\" alt=\"Firefox\" width=\"24px\" height=\"24px\" />](http://godban.github.io/browsers-support-badges/)<br>Firefox | [<img src=\"https://raw.githubusercontent.com/alrra/browser-logos/master/src/chrome/chrome_48x48.png\" alt=\"Chrome\" width=\"24px\" height=\"24px\" />](http://godban.github.io/browsers-support-badges/)<br>Chrome | [<img src=\"https://raw.githubusercontent.com/alrra/browser-logos/master/src/safari/safari_48x48.png\" alt=\"Safari\" width=\"24px\" height=\"24px\" />](http://godban.github.io/browsers-support-badges/)<br>Safari | [<img src=\"https://raw.githubusercontent.com/alrra/browser-logos/master/src/opera/opera_48x48.png\" alt=\"Opera\" width=\"24px\" height=\"24px\" />](http://godban.github.io/browsers-support-badges/)<br>Opera |\n| :---------: | :---------: | :---------: | :---------: | :---------: |\n| IE11, Edge| last 2 versions| last 2 versions| last 2 versions| last 2 versions\n\n## Install\n\n```\n$ npm install BasisHub/bbj-masks\n$ yarn add BasisHub/bbj-masks\n```\n\n**Note :** To support IE11 browser include the [date-time-format-timezone](https://github.com/formatjs/date-time-format-timezone/)\n\n## Usage\n\n```js\nconst formattedNumber = BBj.Masks.Types.number(\n  -5000.123456789,\n  '$ -#,##0.######'\n)\nconsole.log(formattedNumber) // -> $ -5,000.123457\n\nconst formattedDate = BBj.Masks.Types.date(\n  '2018-02-15T14:01:06Z',\n  '%Yz - %Mz - %Dz'\n)\nconsole.log(formattedDate) // -> 18 - 02 - 15\n\nconst formattedString = BBj.Masks.Types.string('abcdefg', 'XX-XXX-XX')\nconsole.log(formattedString) // -> ab-cde-fg\n```\n\n## [Date Masks](https://documentation.basis.com/BASISHelp/WebHelp/commands/date_function_bbj.htm)\n\n| Mask | Supported | Description                                                                                                                                                                                                                        |\n| :--: | :-------: | :--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n|  %Y  |     ✓     | Year                                                                                                                                                                                                                               |\n|  %M  |     ✓     | Month                                                                                                                                                                                                                              |\n|  %D  |     ✓     | Day                                                                                                                                                                                                                                |\n|  %H  |     ✓     | Hour (24-hour clock)                                                                                                                                                                                                               |\n|  %h  |     ✓     | Hour (12-hour clock)                                                                                                                                                                                                               |\n|  %m  |     ✓     | Minute                                                                                                                                                                                                                             |\n|  %s  |     ✓     | Second                                                                                                                                                                                                                             |\n|  %t  |     ×     | Millisecond (thousandths of a second). Available in BBj 18.0 and higher.                                                                                                                                                           |\n|  %P  |     ✓     | AM/PM                                                                                                                                                                                                                              |\n|  %p  |     ✓     | am/pm                                                                                                                                                                                                                              |\n|  %J  |     ✓     | Day number within the year (1-366). (This format is unique to BBj.)                                                                                                                                                                |\n|  %W  |     ✓     | Day number within the week (1-7, Sunday=1). This format is unique to BBj.                                                                                                                                                          |\n|  %w  |     ✓     | Week number within the year (1-53, differs by locale)                                                                                                                                                                              |\n|  %d  |     ×     | Day number within the week (1-7, differs by locale). Available in BBj 16.0 and higher                                                                                                                                              |\n|  %y  |     ×     | Base year of the current week, available in BBj 16.0 and higher. The first few days of January may fall into the last week of the previous year. The last few days of December may fall into the first week of the following year. |\n\n| Modifier | Supported | Description                   |\n| :------: | :-------: | :---------------------------- |\n|    %z    |     ✓     | Zero-fill                     |\n|    %s    |     ✓     | Short text                    |\n|    %l    |     ✓     | Long text                     |\n|    %p    |     ✓     | Packed number (in CHR() form) |\n|    %d    |     ✓     | Decimal (default format)      |\n\n## [Number Masks](https://documentation.basis.com/BASISHelp/WebHelp/usr/numeric_output.htm)\n\n| Mask | Supported | Description                                                                                                                                                                                                                                                                                                                                                       |\n| :--: | :-------: | :---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n|  0   |     ✓     | A zero is always replaced by a digit(0..9).                                                                                                                                                                                                                                                                                                                       |\n|  #   |     ✓     | The pound sign is used to suppress leading zeroes. It is replaced by the fill character for leading zeroes to the left of the decimal point. For trailing zeros to the right of the decimal point it is replaced by a space or a zero (see SETOPTS Byte 4, Bit $04$ for more detail). Any other time it is replaced by a digit. See SETOPTS for more information. |\n|  ,   |     ✓     | To the left of the decimal point, the comma is replaced by the fill character if no digits have yet been placed. Any other time, it results in a comma.                                                                                                                                                                                                           |\n|  \\*  |     ✓     | The asterisk \"\\*\" is inserted into the number.                                                                                                                                                                                                                                                                                                                    |\n|  .   |     ✓     | The decimal point is replaced by a decimal point if any digits appear in the output mask. Otherwise, it is replaced by the fill character. After the decimal point, the fill character becomes a space.                                                                                                                                                           |\n|  \\$  |     ✓     | The dollar sign always results in a dollar sign.                                                                                                                                                                                                                                                                                                                  |\n|  (   |     ✓     | left parenthesis results in a \"(\" if the number is negative, or the fill character if positive.                                                                                                                                                                                                                                                                   |\n|  )   |     ✓     | A right parenthesis results in a \")\" if the number is negative, or the fill character if positive.                                                                                                                                                                                                                                                                |\n|  )   |     ✓     | A right parenthesis results in a \")\" if the number is negative, or the fill character if positive.                                                                                                                                                                                                                                                                |\n|  CR  |     ✓     | The characters \"CR\" are inserted into the number if the number is negative. Two spaces are inserted if the number is positive.                                                                                                                                                                                                                                    |\n|  DR  |     ✓     | The characters \"CR\" are inserted into the number if the number is negative. The characters \"DR\" are inserted if the number is positive.                                                                                                                                                                                                                           |\n|  B   |     ✓     | The upper case \"B\" always becomes a space. Any other character is simply copied to the result.positive.                                                                                                                                                                                                                                                           |\n\n## [String Masks](https://documentation.basis.com/BASISHelp/WebHelp/commands2/str_function.htm)\n\n| Mask | Supported | Description                                                                                                            |\n| :--: | :-------: | :--------------------------------------------------------------------------------------------------------------------- |\n|  X   |     ✓     | Any printable character.                                                                                               |\n|  a   |     ✓     | Any alphabetic character.                                                                                              |\n|  0   |     ✓     | Any digit.                                                                                                             |\n|  z   |     ✓     | Any digit or alphabetic character.                                                                                     |\n|  Z   |     ✓     | Any digit or alphabetic character. Converts lower-case alphabetic characters to upper case.                            |\n|  U   |     ✓     | Any digit , alphabetic character , whitespace or punctuation. Converts lower-case alphabetic characters to upper case. |\n\n## License\n\nLicensed under the [MIT License](https://github.com/BasisHub/bbj-masks/blob/master/LICENSE).\n",
    "longname": "/mnt/d/Gitlab/bbj-masks/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"bbj-masks\",\n  \"description\": \"Format Javascript Dates , Numbers & Strings using BBj masks\",\n  \"main\": \"dist/bbj-masks.bundle.js\",\n  \"author\": \"eu@basis.com\",\n  \"version\": \"v1.8.0\",\n  \"private\": false,\n  \"scripts\": {\n    \"watch\": \"./node_modules/.bin/webpack --watch --progress\",\n    \"watch:test\": \"./node_modules/.bin/mocha-webpack './test/**/*.js' --watch\",\n    \"test\": \"./node_modules/.bin/mocha-webpack './test/**/*.js'\",\n    \"build\": \"./node_modules/.bin/webpack && ./node_modules/.bin/esdoc\"\n  },\n  \"devDependencies\": {\n    \"@babel/core\": \"^7.0.0-beta.40\",\n    \"@babel/preset-env\": \"^7.0.0-beta.40\",\n    \"babel-loader\": \"8.0.0-beta.0\",\n    \"mocha\": \"^5.0.1\",\n    \"mocha-webpack\": \"^1.0.1\",\n    \"uglifyjs-webpack-plugin\": \"^1.1.8\",\n    \"webpack\": \"^3.11.0\"\n  },\n  \"dependencies\": {\n    \"date-fns\": \"^2.8.1\",\n    \"date-fns-tz\": \"^1.0.8\",\n    \"esdoc\": \"^1.1.0\",\n    \"esdoc-standard-plugin\": \"^1.0.0\",\n    \"weekstart\": \"^1.0.1\"\n  }\n}\n",
    "longname": "/mnt/d/Gitlab/bbj-masks/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]
[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/DateMask/DateMask.js",
    "content": "/*\n * This file is part of bbj-masks lib.\n * (c) Basis Europe <eu@basis.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport utcToZonedTime from 'date-fns-tz/utcToZonedTime'\nimport { getWeekStartByLocale as originalGetWeekStartByLocale } from 'weekstart'\n\nexport const IS_TIME_REGEX = /^(2[0-3]|[01][0-9]):?([0-5][0-9]):?([0-5][0-9])(Z|[+-](?:2[0-3]|[01][0-9])(?::?(?:[0-5][0-9]))?)$/\nexport const IS_DATE_REGEX = /^(([12]\\d{3})-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01])(Z|[+-](?:2[0-3]|[01][0-9])(?::?(?:[0-5][0-9]))?))$/\n\n/**\n * Find out when the first day of the week based on the passed locale\n *\n * @param {locale} locale\n *\n * @return {Number} a number 0 = sunday , 1 = monday , ....\n */\nexport const getWeekStartByLocale = locale => {\n  return originalGetWeekStartByLocale(locale)\n}\n\n/**\n *  Get day number in the year of the passed date\n *\n * @param {Date} date\n *\n * @return {Number} day number\n */\nexport const getDayOfYear = date => {\n  const start = new Date(date.getFullYear(), 0, 0)\n\n  const diff =\n    date -\n    start +\n    (start.getTimezoneOffset() - date.getTimezoneOffset()) * 60 * 1000\n  const oneDay = 1000 * 60 * 60 * 24\n  const day = Math.floor(diff / oneDay)\n\n  return day\n}\n\n/**\n * Takes incomplete iso string and return a complete one\n *\n * @param {String} date incomplete iso string\n *\n * @return {String} complete iso string\n */\nexport const fixShortISO = date => {\n  let value = date\n  let offset = (value.match(/z$|[+\\-]\\d\\d:\\d\\d$/i) || [])[0]\n  if (!offset) {\n    offset = 'Z'\n    value += offset\n  }\n\n  if (IS_TIME_REGEX.test(value)) {\n    value = `1970-01-01T${value}`\n  } else if (IS_DATE_REGEX.test(value)) {\n    value = `${value.split(offset)[0]}T00:00:00${offset}`\n  }\n\n  return value\n}\n\n/**\n * Get the browser timezone name , if not supported then the browser\n * timezone offset formatted\n *\n * @return {String} timezone of offset\n */\nexport const getTimezoneOrOffset = () => {\n  const timezone = Intl.DateTimeFormat().resolvedOptions().timeZone\n  if (!timezone) {\n    const pad = (number, length) => {\n      var str = '' + number\n      while (str.length < length) {\n        str = '0' + str\n      }\n      return str\n    }\n\n    let offset = new Date().getTimezoneOffset()\n    offset =\n      (offset < 0 ? '+' : '-') + // Note the reversed sign!\n      pad(parseInt(Math.abs(offset / 60)), 2) +\n      pad(Math.abs(offset % 60), 2)\n\n    return offset\n  }\n\n  return timezone\n}\n\n/**\n * Get the Week Number in the passed date\n *\n * @param {Date} date - Date object\n * @param {Number} weekStart A number which defines the first day of the week (0  = sunday , 1 = monday , ...)\n *\n * @returns {Number} the week number\n */\nexport const getWeekNumber = function(date, weekStart) {\n  const d = new Date(\n    Date.UTC(date.getFullYear(), date.getMonth(), date.getDate())\n  )\n  const dayNum = d.getUTCDay() - (weekStart - 1) || 7\n  d.setUTCDate(d.getUTCDate() + 4 - dayNum)\n  const yearStart = new Date(Date.UTC(d.getUTCFullYear(), 0, 1))\n  return Math.ceil(((d - yearStart) / 86400000 + 1) / 7)\n}\n\n/**\n * DateMask\n *\n * A javascript implementation for BBj dates masking\n *\n * @author Hyyan Abo Fakher <habofakher@basis.com>\n */\nclass DateMask {\n  /**\n   * Mask date\n   *\n   * Mask the passed date with the passed mask\n   *\n   * @param {String} date date as a string\n   * @param {String} mask mask as a string\n   * @param {String} [locale=Browser's locale] the language to use ex(en-US). default is to the system language\n   * @param {String} [timezone=System timezone] the time zone descriptor (e.g. America/Los_Angeles). default to the system\n   *                          timezone\n   *\n   * @return {String} a date masked with the given mask\n   */\n  static mask(date, mask, locale, timezone) {\n    if (!date) return ''\n    if (!mask) return date\n\n    timezone = timezone || getTimezoneOrOffset()\n    locale = locale || Intl.DateTimeFormat().resolvedOptions().locale || 'en-US'\n\n    // make sure we have a complete iso string\n    date = date instanceof Date ? date : fixShortISO(date)\n\n    const dateObject = utcToZonedTime(date, timezone)\n    const translation = DateMask._buildTranslation({\n      year: dateObject.getFullYear(),\n      month: dateObject.getMonth() + 1,\n      monthShort: new Intl.DateTimeFormat([locale], { month: 'short' }).format(\n        dateObject\n      ),\n      monthLong: new Intl.DateTimeFormat([locale], { month: 'long' }).format(\n        dateObject\n      ),\n      day: dateObject.getDate(),\n      dayShort: new Intl.DateTimeFormat([locale], { weekday: 'short' }).format(\n        dateObject\n      ),\n      dayLong: new Intl.DateTimeFormat([locale], { weekday: 'long' }).format(\n        dateObject\n      ),\n      minutes: dateObject.getMinutes(),\n      seconds: dateObject.getSeconds(),\n      get hours24() {\n        return dateObject.getHours()\n      },\n      get hours12() {\n        return this.hours24 % 12 || 12\n      },\n      dayOfYear: getDayOfYear(dateObject),\n      dayOfWeek: dateObject.getDay() + 1, // Sunday = 1 in BBj but Sunday = 0 in JS\n      weekNumber: getWeekNumber(dateObject, getWeekStartByLocale(locale)),\n      locale,\n      timezone\n    })\n\n    let result = mask\n    for (var k in translation) {\n      result = result.replace(new RegExp('(%' + k + ')', 'g'), translation[k])\n    }\n\n    return result\n  }\n\n  /**\n   * Get a map object which contains all possible forms of masks\n   *\n   * @param {Object} dateDetails date\n   *\n   * @return {Object} forms masks\n   */\n  static _buildTranslation(dateDetails) {\n    return {\n      // year\n      Yz: dateDetails.year.toString().substr(-2),\n      Ys: dateDetails.year,\n      Yl: dateDetails.year,\n      Yp: String.fromCharCode(dateDetails.year),\n      Yd: dateDetails.year,\n      Y: dateDetails.year,\n\n      // month\n      Mz:\n        String(dateDetails.month).length == 1\n          ? '0' + dateDetails.month\n          : dateDetails.month,\n      Ms: dateDetails.monthShort,\n      Ml: dateDetails.monthLong,\n      Mp: String.fromCharCode(dateDetails.month),\n      Md: dateDetails.month,\n      M: dateDetails.month,\n\n      // day\n      Dz:\n        String(dateDetails.day).length == 1\n          ? '0' + dateDetails.day\n          : dateDetails.day,\n      Ds: dateDetails.dayShort,\n      Dl: dateDetails.dayLong,\n      Dp: String.fromCharCode(dateDetails.day),\n      Dd: dateDetails.day,\n      D: dateDetails.day,\n\n      // hour 24\n      Hz:\n        String(dateDetails.hours24).length == 1\n          ? '0' + dateDetails.hours24\n          : dateDetails.hours24,\n      Hs: dateDetails.hours24,\n      Hl: dateDetails.hours24,\n      Hp: String.fromCharCode(dateDetails.hours24),\n      Hd: dateDetails.hours24,\n      H: dateDetails.hours24,\n\n      // hour 12\n      hz:\n        String(dateDetails.hours12).length == 1\n          ? '0' + dateDetails.hours12\n          : dateDetails.hours12,\n      hs: dateDetails.hours12,\n      hl: dateDetails.hours12,\n      hp: String.fromCharCode(dateDetails.hours12),\n      hd: dateDetails.hours12,\n      h: dateDetails.hours12,\n\n      // minutes\n      mz:\n        String(dateDetails.minutes).length == 1\n          ? '0' + dateDetails.minutes\n          : dateDetails.minutes,\n      ms: dateDetails.minutes,\n      ml: dateDetails.minutes,\n      mp: String.fromCharCode(dateDetails.minutes),\n      md: dateDetails.minutes,\n      m: dateDetails.minutes,\n\n      // seconds\n      sz:\n        String(dateDetails.seconds).length == 1\n          ? '0' + dateDetails.seconds\n          : dateDetails.seconds,\n      ss: dateDetails.seconds,\n      sl: dateDetails.seconds,\n      sp: String.fromCharCode(dateDetails.seconds),\n      sd: dateDetails.seconds,\n      s: dateDetails.seconds,\n\n      // AM , PM\n      PP: dateDetails.hours24 > 12 ? 'PM' : 'PM',\n      P: dateDetails.hours24 > 12 ? 'PM' : 'AM',\n      pp: dateDetails.hours24 > 12 ? 'pm' : 'am',\n      p: dateDetails.hours24 > 12 ? 'pm' : 'am',\n\n      // Day of Year\n      Jz:\n        String(dateDetails.dayOfYear).length == 1\n          ? '0' + dateDetails.dayOfYear\n          : dateDetails.dayOfYear,\n      Js: dateDetails.dayOfYear,\n      Jl: dateDetails.dayOfYear,\n      Jd: dateDetails.dayOfYear,\n      J: dateDetails.dayOfYear,\n\n      // Day Of Week\n      Wz:\n        String(dateDetails.dayOfWeek).length == 1\n          ? '0' + dateDetails.dayOfWeek\n          : dateDetails.dayOfWeek,\n      Ws: dateDetails.dayOfWeek,\n      Wl: dateDetails.dayOfWeek,\n      Wp: String.fromCharCode(dateDetails.dayOfWeek),\n      Wd: dateDetails.dayOfWeek,\n      W: dateDetails.dayOfWeek,\n\n      // week number\n      wz:\n        String(dateDetails.weekNumber).length == 1\n          ? '0' + dateDetails.weekNumber\n          : dateDetails.weekNumber,\n      ws: dateDetails.weekNumber,\n      wl: dateDetails.weekNumber,\n      wp: String.fromCharCode(dateDetails.weekNumber),\n      wd: dateDetails.weekNumber,\n      w: dateDetails.weekNumber\n    }\n  }\n}\n\nexport default DateMask\n",
    "static": true,
    "longname": "D:/Github/bbj-masks/src/DateMask/DateMask.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "variable",
    "name": "IS_TIME_REGEX",
    "memberof": "src/DateMask/DateMask.js",
    "static": true,
    "longname": "src/DateMask/DateMask.js~IS_TIME_REGEX",
    "access": "public",
    "export": true,
    "importPath": "bbj-masks/src/DateMask/DateMask.js",
    "importStyle": "{IS_TIME_REGEX}",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "undefined"
      ]
    }
  },
  {
    "__docId__": 50,
    "kind": "variable",
    "name": "IS_DATE_REGEX",
    "memberof": "src/DateMask/DateMask.js",
    "static": true,
    "longname": "src/DateMask/DateMask.js~IS_DATE_REGEX",
    "access": "public",
    "export": true,
    "importPath": "bbj-masks/src/DateMask/DateMask.js",
    "importStyle": "{IS_DATE_REGEX}",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "undefined"
      ]
    }
  },
  {
    "__docId__": 51,
    "kind": "function",
    "name": "getWeekStartByLocale",
    "memberof": "src/DateMask/DateMask.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/DateMask/DateMask.js~getWeekStartByLocale",
    "access": "public",
    "export": true,
    "importPath": "bbj-masks/src/DateMask/DateMask.js",
    "importStyle": "{getWeekStartByLocale}",
    "description": "Find out when the first day of the week based on the passed locale",
    "lineNumber": 22,
    "params": [
      {
        "nullable": null,
        "types": [
          "locale"
        ],
        "spread": false,
        "optional": false,
        "name": "locale",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "a number 0 = sunday , 1 = monday , ...."
    }
  },
  {
    "__docId__": 52,
    "kind": "function",
    "name": "getDayOfYear",
    "memberof": "src/DateMask/DateMask.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/DateMask/DateMask.js~getDayOfYear",
    "access": "public",
    "export": true,
    "importPath": "bbj-masks/src/DateMask/DateMask.js",
    "importStyle": "{getDayOfYear}",
    "description": " Get day number in the year of the passed date",
    "lineNumber": 33,
    "params": [
      {
        "nullable": null,
        "types": [
          "Date"
        ],
        "spread": false,
        "optional": false,
        "name": "date",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "day number"
    }
  },
  {
    "__docId__": 53,
    "kind": "function",
    "name": "fixShortISO",
    "memberof": "src/DateMask/DateMask.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/DateMask/DateMask.js~fixShortISO",
    "access": "public",
    "export": true,
    "importPath": "bbj-masks/src/DateMask/DateMask.js",
    "importStyle": "{fixShortISO}",
    "description": "Takes incomplete iso string and return a complete one",
    "lineNumber": 53,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "date",
        "description": "incomplete iso string"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "complete iso string"
    }
  },
  {
    "__docId__": 54,
    "kind": "function",
    "name": "getTimezoneOrOffset",
    "memberof": "src/DateMask/DateMask.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/DateMask/DateMask.js~getTimezoneOrOffset",
    "access": "public",
    "export": true,
    "importPath": "bbj-masks/src/DateMask/DateMask.js",
    "importStyle": "{getTimezoneOrOffset}",
    "description": "Get the browser timezone name , if not supported then the browser\ntimezone offset formatted",
    "lineNumber": 76,
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "timezone of offset"
    },
    "params": []
  },
  {
    "__docId__": 55,
    "kind": "function",
    "name": "getWeekNumber",
    "memberof": "src/DateMask/DateMask.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/DateMask/DateMask.js~getWeekNumber",
    "access": "public",
    "export": true,
    "importPath": "bbj-masks/src/DateMask/DateMask.js",
    "importStyle": "{getWeekNumber}",
    "description": "Get the Week Number in the passed date",
    "lineNumber": 107,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Number} the week number"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Date"
        ],
        "spread": false,
        "optional": false,
        "name": "date",
        "description": "Date object"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "weekStart",
        "description": "A number which defines the first day of the week (0  = sunday , 1 = monday , ...)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "the week number"
    }
  },
  {
    "__docId__": 56,
    "kind": "class",
    "name": "DateMask",
    "memberof": "src/DateMask/DateMask.js",
    "static": true,
    "longname": "src/DateMask/DateMask.js~DateMask",
    "access": "public",
    "export": true,
    "importPath": "bbj-masks/src/DateMask/DateMask.js",
    "importStyle": "DateMask",
    "description": "DateMask\n\nA javascript implementation for BBj dates masking",
    "lineNumber": 124,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Hyyan Abo Fakher <habofakher@basis.com>"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 57,
    "kind": "method",
    "name": "mask",
    "memberof": "src/DateMask/DateMask.js~DateMask",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/DateMask/DateMask.js~DateMask.mask",
    "access": "public",
    "description": "Mask date\n\nMask the passed date with the passed mask",
    "lineNumber": 138,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "date",
        "description": "date as a string"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "mask",
        "description": "mask as a string"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "Browser's locale",
        "defaultRaw": "Browser's locale",
        "name": "locale",
        "description": "the language to use ex(en-US). default is to the system language"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "System timezone",
        "defaultRaw": "System timezone",
        "name": "timezone",
        "description": "the time zone descriptor (e.g. America/Los_Angeles). default to the system\n                         timezone"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "a date masked with the given mask"
    }
  },
  {
    "__docId__": 58,
    "kind": "method",
    "name": "_buildTranslation",
    "memberof": "src/DateMask/DateMask.js~DateMask",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/DateMask/DateMask.js~DateMask._buildTranslation",
    "access": "private",
    "description": "Get a map object which contains all possible forms of masks",
    "lineNumber": 195,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "dateDetails",
        "description": "date"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "forms masks"
    },
    "ignore": true
  },
  {
    "__docId__": 59,
    "kind": "file",
    "name": "src/NumberMask/NumberMask.js",
    "content": "/*\r\n * This file is part of bbj-masks lib.\r\n * (c) Basis Europe <eu@basis.com>\r\n *\r\n * For the full copyright and license information, please view the LICENSE\r\n * file that was distributed with this source code.\r\n */\r\n\r\n/**\r\n * NumberMask\r\n *\r\n * A javascript implementation for BBj numbers masking\r\n *\r\n * @author Hyyan Abo Fakher <habofakher@basis.com>\r\n */\r\nclass NumberMask {\r\n  /**\r\n   * Mask the given number with the given mask according to BBj rules\r\n   *\r\n   * @param {Number} number the number to format\r\n   * @param {String} mask the mask to use for formatting\r\n   * @param {String} [groupingSeparator=,] - a char which will be used as a grouping separator\r\n   * @param {String} [decimalSeparator=.]  - a char which will be used as a decimal separator\r\n   * @param {Boolean} [forceTrailingZeros=false] - Affects the output by switching the way a mask with \"#\" characters in the trailing positions is filled.\r\n   *                                              for example, the function `NumberMask.mask(.10:\"#.##\")` returns ` .10` instead of ` .1 `\r\n   * @param {Boolean} [loose=true] when true , errors will be ignored and the method will try at apply the mask\r\n   *                anyway , otherwise it will stop at first error and throw it.\r\n   * \r\n   * @throws {MaskError} only if loose is disabled\r\n   * \r\n   * @returns {String} the masked number\r\n   */\r\n  static mask(\r\n    number,\r\n    mask,\r\n    groupingSeparator = ',',\r\n    decimalSeparator = '.',\r\n    forceTrailingZeros = false,\r\n    loose = true\r\n  ) {\r\n    const maskLen = mask.length\r\n    if (0 === maskLen) {\r\n      if (loose) return str\r\n      // friendly silent fail\r\n      else\r\n        throw {\r\n          name: 'MaskError',\r\n          message: `MaskError: Mask is empty`\r\n        }\r\n    }\r\n\r\n    // Get magnitude and precision of MASK\r\n    let maskBeforeDecimal = 0\r\n    let maskAfterDecimal = 0\r\n    let foundDecimal = false\r\n    for (let i = 0; i < maskLen; ++i) {\r\n      const m = mask.charAt(i)\r\n      if (m == '0' || m == '#') {\r\n        if (foundDecimal) ++maskAfterDecimal\r\n        else ++maskBeforeDecimal\r\n      } else if (m == '.') foundDecimal = true\r\n    }\r\n\r\n    let num = NumberMask._round(number, maskAfterDecimal)\r\n    let bytes = NumberMask._toCharArray(num)\r\n\r\n    // Get magnitude and precision of NUMBER\r\n    let inLen = bytes.length\r\n    let numBeforeDecimal = 0\r\n    let numAfterDecimal = 0\r\n    foundDecimal = false\r\n    for (let i = 0; i < inLen; ++i) {\r\n      if (bytes[i] == '.') foundDecimal = true\r\n      else {\r\n        if (foundDecimal) ++numAfterDecimal\r\n        else ++numBeforeDecimal\r\n      }\r\n    }\r\n\r\n    // always ignore mask overflow\r\n    if (numBeforeDecimal > maskBeforeDecimal) {\r\n      if (loose) return number.toString()\r\n      // friendly silent fail\r\n      else\r\n        throw {\r\n          name: 'MaskError',\r\n          message: `MaskError: Number is too large for mask`\r\n        }\r\n    }\r\n\r\n    // round if mask is for a lower precision number\r\n    if (numAfterDecimal > maskAfterDecimal) {\r\n      num = NumberMask._round(num, maskAfterDecimal)\r\n      bytes = NumberMask._toCharArray(num)\r\n      inLen = bytes.length\r\n\r\n      // Get new magnitude and precision of NUMBER\r\n      numBeforeDecimal = 0\r\n      numAfterDecimal = 0\r\n      foundDecimal = false\r\n      for (let i = 0; i < inLen; ++i) {\r\n        if (bytes[i] == '.') foundDecimal = true\r\n        else {\r\n          if (foundDecimal) ++numAfterDecimal\r\n          else ++numBeforeDecimal\r\n        }\r\n      }\r\n\r\n      // always ignore mask overflow\r\n      if (numBeforeDecimal > maskBeforeDecimal) {\r\n        if (loose) return number.toString()\r\n        // friendly silent fail\r\n        else\r\n          throw {\r\n            name: 'MaskError',\r\n            message: `MaskError: Number is too large for mask`\r\n          }\r\n      }\r\n    }\r\n\r\n    let fillByte = ' ',\r\n      floatByte = ' '\r\n    let inPos = 0,\r\n      outPos = 0,\r\n      floatPos = 0\r\n    if (mask.charAt(0) == '*') fillByte = '*'\r\n\r\n    const fillInit = fillByte\r\n    const isNegative = NumberMask._getSign(num) < 0\r\n    let emitDecimal = inLen > 0 || mask.indexOf('0') >= 0\r\n    let foundZero = false\r\n    let foundDigit = false\r\n    let currency = false\r\n    foundDecimal = false\r\n\r\n    let ret = new Array(maskLen)\r\n\r\n    for (let maskPos = 0; maskPos < maskLen; ++maskPos) {\r\n      let m = mask.charAt(maskPos)\r\n      switch (m) {\r\n        case '0':\r\n          --maskBeforeDecimal\r\n          if (maskBeforeDecimal < numBeforeDecimal && inPos < inLen) {\r\n            ret[outPos] = bytes[inPos]\r\n            ++inPos\r\n            foundDigit = true\r\n          } else {\r\n            ret[outPos] = '0'\r\n            foundZero = true\r\n          }\r\n          ++outPos\r\n          break\r\n\r\n        case '#':\r\n          --maskBeforeDecimal\r\n          if (maskBeforeDecimal < numBeforeDecimal && inPos < inLen) {\r\n            ret[outPos] = bytes[inPos]\r\n            ++inPos\r\n            foundDigit = true\r\n          } else {\r\n            ret[outPos] =\r\n              foundDecimal &&\r\n              forceTrailingZeros &&\r\n              NumberMask._getSign(num) != 0\r\n                ? '0'\r\n                : fillByte\r\n            if (!foundDecimal) floatPos = maskPos\r\n          }\r\n          ++outPos\r\n          break\r\n\r\n        case ',':\r\n          if (foundZero || inPos > 0) ret[outPos] = groupingSeparator\r\n          else {\r\n            ret[outPos] = fillByte\r\n            if (!foundDecimal) floatPos = maskPos\r\n          }\r\n          ++outPos\r\n          break\r\n\r\n        case '-':\r\n          if (!foundDigit && floatByte == ' ') {\r\n            if (isNegative) floatByte = '-'\r\n            ret[outPos] = fillByte\r\n            floatPos = foundDecimal ? -1 : maskPos\r\n          } else ret[outPos] = isNegative ? '-' : fillByte\r\n          ++outPos\r\n          break\r\n\r\n        case '+':\r\n          if (!foundDigit && floatByte == ' ') {\r\n            floatByte = isNegative ? '-' : '+'\r\n            ret[outPos] = fillByte\r\n            floatPos = foundDecimal ? -1 : maskPos\r\n          } else ret[outPos] = isNegative ? '-' : '+'\r\n          ++outPos\r\n          break\r\n\r\n        case '$':\r\n          if (!foundDigit && floatByte == ' ') {\r\n            floatByte = '$'\r\n            ret[outPos] = fillByte\r\n            floatPos = foundDecimal ? -1 : maskPos\r\n          } else {\r\n            ret[outPos] = '$'\r\n          }\r\n          ++outPos\r\n          break\r\n\r\n        // case '&':\r\n        //   currency = true\r\n        //   if (!foundDigit && floatByte == ' ') {\r\n        //     floatByte = '&'\r\n        //     ret[outPos] = fillByte\r\n        //     floatPos = foundDecimal ? -1 : maskPos\r\n        //   } else {\r\n        //     ret[outPos] = '&'\r\n        //   }\r\n        //   ++outPos\r\n        //   break\r\n\r\n        // case '@':\r\n        //   currency = true\r\n        //   if (!foundDigit && floatByte == ' ') {\r\n        //     floatByte = '@'\r\n        //     ret[outPos] = fillByte\r\n        //     floatPos = foundDecimal ? -1 : maskPos\r\n        //   } else {\r\n        //     ret[outPos] = '@'\r\n        //   }\r\n        //   ++outPos\r\n        //   break\r\n\r\n        case '(':\r\n          if (!foundDigit && floatByte == ' ') {\r\n            if (isNegative) floatByte = '('\r\n            ret[outPos] = fillByte\r\n            floatPos = foundDecimal ? -1 : maskPos\r\n          } else {\r\n            if (isNegative) {\r\n              ret[outPos] = '('\r\n            } else {\r\n              ret[outPos] = foundDecimal ? ' ' : fillByte\r\n            }\r\n          }\r\n          ++outPos\r\n          break\r\n\r\n        case ')':\r\n          if (isNegative) {\r\n            ret[outPos] = ')'\r\n          } else {\r\n            ret[outPos] = foundDecimal ? ' ' : fillByte\r\n          }\r\n          ++outPos\r\n          break\r\n\r\n        case 'C':\r\n          if (maskPos < maskLen - 1 && mask.charAt(maskPos + 1) == 'R') {\r\n            if (isNegative) {\r\n              ret[outPos] = 'C'\r\n              ret[outPos + 1] = 'R'\r\n            } else {\r\n              ret[outPos] = ' '\r\n              ret[outPos + 1] = ' '\r\n            }\r\n            outPos += 2\r\n            ++maskPos\r\n          } else {\r\n            ret[outPos] = 'C'\r\n            ++outPos\r\n          }\r\n          break\r\n        case 'D':\r\n          if (maskPos < maskLen - 1 && mask.charAt(maskPos + 1) == 'R') {\r\n            if (isNegative) {\r\n              ret[outPos] = 'C'\r\n              ret[outPos + 1] = 'R'\r\n            } else {\r\n              ret[outPos] = 'D'\r\n              ret[outPos + 1] = 'R'\r\n            }\r\n            outPos += 2\r\n            ++maskPos\r\n          } else {\r\n            ret[outPos] = 'D'\r\n            ++outPos\r\n          }\r\n          break\r\n\r\n        case '*':\r\n          ret[outPos] = '*'\r\n          ++outPos\r\n          break\r\n\r\n        case '.':\r\n          ret[outPos] = emitDecimal ? decimalSeparator : fillByte\r\n          fillByte = ' '\r\n          foundDecimal = true\r\n          ++inPos\r\n          ++outPos\r\n          break\r\n\r\n        case 'B':\r\n          ret[outPos] = ' '\r\n          ++outPos\r\n          break\r\n\r\n        default:\r\n          ret[outPos] = m\r\n          ++outPos\r\n          break\r\n      }\r\n    }\r\n\r\n    if (floatByte != ' ') {\r\n      if (floatPos < 0) floatPos = outPos\r\n      while (floatPos >= maskLen) --floatPos\r\n      if (ret[floatPos] == fillInit) ret[floatPos] = floatByte\r\n    }\r\n\r\n    return ret.join('')\r\n  }\r\n\r\n  static _shift(number, precision, reverseShift) {\r\n    if (reverseShift) precision = -precision\r\n    var numArray = ('' + number).split('e')\r\n    return +(\r\n      numArray[0] +\r\n      'e' +\r\n      (numArray[1] ? +numArray[1] + precision : precision)\r\n    )\r\n  }\r\n\r\n  static _round(number, precision) {\r\n    return NumberMask._shift(\r\n      Math.round(NumberMask._shift(number, precision, false)),\r\n      precision,\r\n      true\r\n    )\r\n  }\r\n\r\n  static _toCharArray(number) {\r\n    const signum = NumberMask._getSign(number)\r\n    let chars = []\r\n\r\n    if (signum !== 0) {\r\n      let string = signum < 0 ? `${-1 * number.toString()}` : number.toString()\r\n\r\n      if (string.length > 1 && string.charAt(0) == '0')\r\n        string = string.substring(1)\r\n\r\n      // The string contains only [0-9] and '.'\r\n      chars = string.split('')\r\n    }\r\n\r\n    return chars\r\n  }\r\n\r\n  /**\r\n   * Returns the sign of a number\r\n   *\r\n   * @param {Number} x number\r\n   * @returns {Number} A number representing the sign of the given argument.\r\n   *                   If the argument is a positive number, negative number, positive zero\r\n   *                   or negative zero, the function will return 1, -1, 0 or -0 respectively.\r\n   *                   Otherwise, NaN is returned.\r\n   */\r\n  static _getSign(x) {\r\n    return (x > 0) - (x < 0) || +x\r\n  }\r\n}\r\n\r\nexport default NumberMask\r\n",
    "static": true,
    "longname": "D:/Github/bbj-masks/src/NumberMask/NumberMask.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 60,
    "kind": "class",
    "name": "NumberMask",
    "memberof": "src/NumberMask/NumberMask.js",
    "static": true,
    "longname": "src/NumberMask/NumberMask.js~NumberMask",
    "access": "public",
    "export": true,
    "importPath": "bbj-masks/src/NumberMask/NumberMask.js",
    "importStyle": "NumberMask",
    "description": "NumberMask\n\nA javascript implementation for BBj numbers masking",
    "lineNumber": 16,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Hyyan Abo Fakher <habofakher@basis.com>"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 61,
    "kind": "method",
    "name": "mask",
    "memberof": "src/NumberMask/NumberMask.js~NumberMask",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/NumberMask/NumberMask.js~NumberMask.mask",
    "access": "public",
    "description": "Mask the given number with the given mask according to BBj rules",
    "lineNumber": 33,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{String} the masked number"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": "the number to format"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "mask",
        "description": "the mask to use for formatting"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": ",",
        "defaultRaw": ",",
        "name": "groupingSeparator",
        "description": "a char which will be used as a grouping separator"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": ".",
        "defaultRaw": ".",
        "name": "decimalSeparator",
        "description": "a char which will be used as a decimal separator"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "forceTrailingZeros",
        "description": "Affects the output by switching the way a mask with \"#\" characters in the trailing positions is filled.\n                                             for example, the function `NumberMask.mask(.10:\"#.##\")` returns ` .10` instead of ` .1 `"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "loose",
        "description": "when true , errors will be ignored and the method will try at apply the mask\n               anyway , otherwise it will stop at first error and throw it."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "the masked number"
    },
    "throws": [
      {
        "types": [
          "MaskError"
        ],
        "description": "only if loose is disabled"
      }
    ]
  },
  {
    "__docId__": 62,
    "kind": "method",
    "name": "_shift",
    "memberof": "src/NumberMask/NumberMask.js~NumberMask",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/NumberMask/NumberMask.js~NumberMask._shift",
    "access": "private",
    "description": null,
    "lineNumber": 325,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "number",
        "types": [
          "*"
        ]
      },
      {
        "name": "precision",
        "types": [
          "*"
        ]
      },
      {
        "name": "reverseShift",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 63,
    "kind": "method",
    "name": "_round",
    "memberof": "src/NumberMask/NumberMask.js~NumberMask",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/NumberMask/NumberMask.js~NumberMask._round",
    "access": "private",
    "description": null,
    "lineNumber": 335,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "number",
        "types": [
          "*"
        ]
      },
      {
        "name": "precision",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 64,
    "kind": "method",
    "name": "_toCharArray",
    "memberof": "src/NumberMask/NumberMask.js~NumberMask",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/NumberMask/NumberMask.js~NumberMask._toCharArray",
    "access": "private",
    "description": null,
    "lineNumber": 343,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "number",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 65,
    "kind": "method",
    "name": "_getSign",
    "memberof": "src/NumberMask/NumberMask.js~NumberMask",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/NumberMask/NumberMask.js~NumberMask._getSign",
    "access": "private",
    "description": "Returns the sign of a number",
    "lineNumber": 369,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Number} A number representing the sign of the given argument.\n                  If the argument is a positive number, negative number, positive zero\n                  or negative zero, the function will return 1, -1, 0 or -0 respectively.\n                  Otherwise, NaN is returned."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "number"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "A number representing the sign of the given argument.\n                  If the argument is a positive number, negative number, positive zero\n                  or negative zero, the function will return 1, -1, 0 or -0 respectively.\n                  Otherwise, NaN is returned."
    },
    "ignore": true
  },
  {
    "__docId__": 66,
    "kind": "file",
    "name": "src/StringMask/StringMask.js",
    "content": "/*\r\n * This file is part of bbj-masks lib.\r\n * (c) Basis Europe <eu@basis.com>\r\n *\r\n * For the full copyright and license information, please view the LICENSE\r\n * file that was distributed with this source code.\r\n */\r\n\r\nconst isNumberRegex = /^\\d+$/\r\nconst isWhitespaceRegex = /\\s/\r\nconst punctuationList = '!\"#$%&\\'()*+,-./:;<=>?@[]^_`{|}~'\r\n\r\n/**\r\n * Check if the given string is in lower case\r\n *\r\n * @param {String} str\r\n */\r\nconst isLowerCase = str => {\r\n  return str == str.toLowerCase() && str != str.toUpperCase()\r\n}\r\n\r\n/**\r\n * Check if the given string is in upper case\r\n *\r\n * @param {String} str\r\n */\r\nconst isUpperCase = str => {\r\n  return str == str.toUpperCase() && str != str.toLowerCase()\r\n}\r\n\r\nconst passOrThrowError = (loose, ret, i, str) => {\r\n  if (!loose) {\r\n    const char = str.charAt(i)\r\n    const pos = i + 1\r\n    throw {\r\n      name: 'StringMaskError',\r\n      message: `StringMaskError: error applying mask at position \"${pos}\" , char \"${char}\"`,\r\n      pos,\r\n      char\r\n    }\r\n  } else ret[i] = ' '\r\n}\r\n\r\n/**\r\n * NumberMask\r\n *\r\n * A javascript implementation for BBj numbers masking\r\n *\r\n * @author Hyyan Abo Fakher <habofakher@basis.com>\r\n */\r\nclass StringMask {\r\n  /**\r\n   * Mask the given string with the given mask according to BBj rules\r\n   *\r\n   * @param {String} str the string to mask\r\n   * @param {String} mask the mask to use for formatting\r\n   * @param {Boolean} [loose=true] when true , errors will be ignored and the method will try at apply the mask\r\n   *                anyway , otherwise it will stop at first error and throw it.\r\n   * \r\n   * @throws {MaskIsTooShortError}\r\n   * @throws {StringMaskError}\r\n   * @throws {MaskError}\r\n   * \r\n   * @returns {String} the masked string\r\n   */\r\n  static mask(str, mask, loose = true) {\r\n    str = String(str)\r\n    mask = String(mask)\r\n    const maskLen = mask.length\r\n    const strLen = str.length\r\n\r\n    if (strLen > maskLen) {\r\n      if (loose) return str\r\n      // friendly silent fail\r\n      else\r\n        throw {\r\n          name: 'MaskIsTooShortError',\r\n          message: `MaskIsTooShortError: Mask is shorter than the passed string`\r\n        }\r\n    }\r\n\r\n    const ret = new Array(maskLen)\r\n    let pos = 0 // to keep track of the current position in the str\r\n    let maskByte = ''\r\n\r\n    for (let i = 0; i < maskLen; i++) {\r\n      maskByte = mask.charAt(i)\r\n      switch (maskByte) {\r\n        case 'X': // match any character\r\n          ret[i] = pos < strLen ? str.charAt(pos) : ' '\r\n          ++pos\r\n          break\r\n\r\n        case 'A': // match letter; force upper case\r\n          if (pos < strLen) {\r\n            const byte = str.charAt(pos)\r\n            if (isUpperCase(byte)) ret[i] = byte\r\n            else if (isLowerCase(byte)) ret[i] = byte.toUpperCase()\r\n            else passOrThrowError(loose, ret, i, str)\r\n          } else ret[i] = ' '\r\n          ++pos\r\n          break\r\n\r\n        case 'a': // match letter\r\n          if (pos < strLen) {\r\n            const byte = str.charAt(pos)\r\n            if (isUpperCase(byte) || isLowerCase(byte)) ret[i] = byte\r\n            else passOrThrowError(loose, ret, i, str)\r\n          } else ret[i] = ' '\r\n          ++pos\r\n          break\r\n        case '0': // match digit\r\n          if (pos < strLen) {\r\n            const byte = str.charAt(pos)\r\n            if (isNumberRegex.test(byte)) ret[i] = byte\r\n            else passOrThrowError(loose, ret, i, str)\r\n          } else ret[i] = ' '\r\n          ++pos\r\n          break\r\n        case 'Z': // match letter or digit; force upper case\r\n          if (pos < strLen) {\r\n            const byte = str.charAt(pos)\r\n            if (isUpperCase(byte) || isNumberRegex.test(byte)) ret[i] = byte\r\n            else if (isLowerCase(byte)) ret[i] = byte.toUpperCase()\r\n            else passOrThrowError(loose, ret, i, str)\r\n          } else ret[i] = ' '\r\n          ++pos\r\n          break\r\n        case 'z': // match letter or digit\r\n          if (pos < strLen) {\r\n            const byte = str.charAt(pos)\r\n            if (\r\n              isUpperCase(byte) ||\r\n              isLowerCase(byte) ||\r\n              isNumberRegex.test(byte)\r\n            )\r\n              ret[i] = byte\r\n            else passOrThrowError(loose, ret, i, str)\r\n          } else ret[i] = ' '\r\n          ++pos\r\n          break\r\n\r\n          break\r\n        case 'U': // match letter (force upper case), digit, whitespace or punctuation.\r\n          if (pos < strLen) {\r\n            const byte = str.charAt(pos)\r\n            if (isLowerCase(byte)) ret[i] = byte.toUpperCase()\r\n            else if (\r\n              isUpperCase(byte) ||\r\n              isNumberRegex.test(byte) ||\r\n              isWhitespaceRegex.test(byte) ||\r\n              punctuationList.indexOf(byte) > -1\r\n            )\r\n              ret[i] = byte\r\n            else passOrThrowError(loose, ret, i, str)\r\n          } else ret[i] = ' '\r\n          ++pos\r\n          break\r\n        default:\r\n          ret[i] = maskByte\r\n          break\r\n      }\r\n    }\r\n\r\n    if (pos < strLen) {\r\n      if (!loose) {\r\n        throw { name: 'MaskError', message: 'Mask cannot be applied' }\r\n      }\r\n    }\r\n\r\n    return ret.join('')\r\n  }\r\n}\r\n\r\nexport default StringMask\r\n",
    "static": true,
    "longname": "D:/Github/bbj-masks/src/StringMask/StringMask.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 67,
    "kind": "variable",
    "name": "isNumberRegex",
    "memberof": "src/StringMask/StringMask.js",
    "static": true,
    "longname": "src/StringMask/StringMask.js~isNumberRegex",
    "access": "public",
    "export": false,
    "importPath": "bbj-masks/src/StringMask/StringMask.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "undefined"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 68,
    "kind": "variable",
    "name": "isWhitespaceRegex",
    "memberof": "src/StringMask/StringMask.js",
    "static": true,
    "longname": "src/StringMask/StringMask.js~isWhitespaceRegex",
    "access": "public",
    "export": false,
    "importPath": "bbj-masks/src/StringMask/StringMask.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "undefined"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 69,
    "kind": "variable",
    "name": "punctuationList",
    "memberof": "src/StringMask/StringMask.js",
    "static": true,
    "longname": "src/StringMask/StringMask.js~punctuationList",
    "access": "public",
    "export": false,
    "importPath": "bbj-masks/src/StringMask/StringMask.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 70,
    "kind": "function",
    "name": "isLowerCase",
    "memberof": "src/StringMask/StringMask.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/StringMask/StringMask.js~isLowerCase",
    "access": "public",
    "export": false,
    "importPath": "bbj-masks/src/StringMask/StringMask.js",
    "importStyle": null,
    "description": "Check if the given string is in lower case",
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "str",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 71,
    "kind": "function",
    "name": "isUpperCase",
    "memberof": "src/StringMask/StringMask.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/StringMask/StringMask.js~isUpperCase",
    "access": "public",
    "export": false,
    "importPath": "bbj-masks/src/StringMask/StringMask.js",
    "importStyle": null,
    "description": "Check if the given string is in upper case",
    "lineNumber": 27,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "str",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 72,
    "kind": "function",
    "name": "passOrThrowError",
    "memberof": "src/StringMask/StringMask.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/StringMask/StringMask.js~passOrThrowError",
    "access": "public",
    "export": false,
    "importPath": "bbj-masks/src/StringMask/StringMask.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "params": [
      {
        "name": "loose",
        "types": [
          "*"
        ]
      },
      {
        "name": "ret",
        "types": [
          "*"
        ]
      },
      {
        "name": "i",
        "types": [
          "*"
        ]
      },
      {
        "name": "str",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 73,
    "kind": "class",
    "name": "StringMask",
    "memberof": "src/StringMask/StringMask.js",
    "static": true,
    "longname": "src/StringMask/StringMask.js~StringMask",
    "access": "public",
    "export": true,
    "importPath": "bbj-masks/src/StringMask/StringMask.js",
    "importStyle": "StringMask",
    "description": "NumberMask\n\nA javascript implementation for BBj numbers masking",
    "lineNumber": 51,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Hyyan Abo Fakher <habofakher@basis.com>"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 74,
    "kind": "method",
    "name": "mask",
    "memberof": "src/StringMask/StringMask.js~StringMask",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/StringMask/StringMask.js~StringMask.mask",
    "access": "public",
    "description": "Mask the given string with the given mask according to BBj rules",
    "lineNumber": 66,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{String} the masked string"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "str",
        "description": "the string to mask"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "mask",
        "description": "the mask to use for formatting"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "loose",
        "description": "when true , errors will be ignored and the method will try at apply the mask\n               anyway , otherwise it will stop at first error and throw it."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "the masked string"
    },
    "throws": [
      {
        "types": [
          "MaskIsTooShortError"
        ],
        "description": ""
      },
      {
        "types": [
          "StringMaskError"
        ],
        "description": ""
      },
      {
        "types": [
          "MaskError"
        ],
        "description": ""
      }
    ]
  },
  {
    "__docId__": 75,
    "kind": "file",
    "name": "src/Types/Types.js",
    "content": "/*\n * This file is part of bbj-masks lib.\n * (c) Basis Europe <eu@basis.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport NumberMask from '../NumberMask'\nimport DateMask from '../DateMask'\nimport StringMask from '../StringMask'\n\n/**\n * Types\n *\n * BBj masks factory\n *\n * @author Hyyan Abo Fakher <habofakher@basis.com>\n */\nclass Types {\n  /**\n   * Mask the given number with the given mask according to BBj rules\n   *\n   * @param {Number} number the number to format\n   * @param {String} mask the mask to use for formatting\n   * @param {String} [groupingSeparator=,] - a char which will be used as a grouping separator\n   * @param {String} [decimalSeparator=.]  - a char which will be used as a decimal separator\n   * @param {Boolean} [forceTrailingZeros=false] - Affects the output by switching the way a mask with \"#\" characters in the trailing positions is filled.\n   *                                              for example, the function `NumberMask.mask(.10:\"#.##\")` returns ` .10` instead of ` .1 `\n   * @param {Boolean} [loose=true] when true , errors will be ignored and the method will try at apply the mask\n   *                anyway , otherwise it will stop at first error and throw it.\n   *\n   * @returns {String} the masked number\n   */\n  static number(\n    number,\n    mask,\n    groupingSeparator = ',',\n    decimalSeparator = '.',\n    forceTrailingZeros = false,\n    loose = true\n  ) {\n    return NumberMask.mask(\n      number,\n      mask,\n      groupingSeparator,\n      decimalSeparator,\n      forceTrailingZeros,\n      loose\n    )\n  }\n\n  /**\n   * Mask a date according to bbj masking rules\n   *\n   * @param {String} date date as a string\n   * @param {String} mask mask as a string\n   * @param {String} [locale=Browser's locale] the language to use ex(en-US). default is to the system language\n   * @param {String} [timezone=System timezone] the time zone descriptor (e.g. America/Los_Angeles). default to the system\n   *                          timezone\n   *\n   * @return {String} number masked with the given mask\n   */\n  static date(date, mask, locale, timezone) {\n    return DateMask.mask(date, mask, locale, timezone)\n  }\n\n  /**\n   * Mask the given string with the given mask according to BBj rules\n   *\n   * @param {String} str the string to mask\n   * @param {String} mask the mask to use for formatting\n   * @param {Boolean} [loose=true] when true , errors will be ignored and the method will try at apply the mask\n   *                anyway , otherwise it will stop at first error and throw it.\n   *\n   * @throws {MaskIsTooShortError}\n   * @throws {StringMaskError}\n   * @throws {MaskError}\n   *\n   * @returns {String} the masked string\n   */\n  static string(str, mask, loose = true) {\n    return StringMask.mask(str, mask, loose)\n  }\n}\n\nexport default Types\n",
    "static": true,
    "longname": "D:/Github/bbj-masks/src/Types/Types.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 76,
    "kind": "class",
    "name": "Types",
    "memberof": "src/Types/Types.js",
    "static": true,
    "longname": "src/Types/Types.js~Types",
    "access": "public",
    "export": true,
    "importPath": "bbj-masks/src/Types/Types.js",
    "importStyle": "Types",
    "description": "Types\n\nBBj masks factory",
    "lineNumber": 20,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Hyyan Abo Fakher <habofakher@basis.com>"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 77,
    "kind": "method",
    "name": "number",
    "memberof": "src/Types/Types.js~Types",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Types/Types.js~Types.number",
    "access": "public",
    "description": "Mask the given number with the given mask according to BBj rules",
    "lineNumber": 35,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{String} the masked number"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": "the number to format"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "mask",
        "description": "the mask to use for formatting"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": ",",
        "defaultRaw": ",",
        "name": "groupingSeparator",
        "description": "a char which will be used as a grouping separator"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": ".",
        "defaultRaw": ".",
        "name": "decimalSeparator",
        "description": "a char which will be used as a decimal separator"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "forceTrailingZeros",
        "description": "Affects the output by switching the way a mask with \"#\" characters in the trailing positions is filled.\n                                             for example, the function `NumberMask.mask(.10:\"#.##\")` returns ` .10` instead of ` .1 `"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "loose",
        "description": "when true , errors will be ignored and the method will try at apply the mask\n               anyway , otherwise it will stop at first error and throw it."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "the masked number"
    }
  },
  {
    "__docId__": 78,
    "kind": "method",
    "name": "date",
    "memberof": "src/Types/Types.js~Types",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Types/Types.js~Types.date",
    "access": "public",
    "description": "Mask a date according to bbj masking rules",
    "lineNumber": 64,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "date",
        "description": "date as a string"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "mask",
        "description": "mask as a string"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "Browser's locale",
        "defaultRaw": "Browser's locale",
        "name": "locale",
        "description": "the language to use ex(en-US). default is to the system language"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "System timezone",
        "defaultRaw": "System timezone",
        "name": "timezone",
        "description": "the time zone descriptor (e.g. America/Los_Angeles). default to the system\n                         timezone"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "number masked with the given mask"
    }
  },
  {
    "__docId__": 79,
    "kind": "method",
    "name": "string",
    "memberof": "src/Types/Types.js~Types",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Types/Types.js~Types.string",
    "access": "public",
    "description": "Mask the given string with the given mask according to BBj rules",
    "lineNumber": 82,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{String} the masked string"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "str",
        "description": "the string to mask"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "mask",
        "description": "the mask to use for formatting"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "loose",
        "description": "when true , errors will be ignored and the method will try at apply the mask\n               anyway , otherwise it will stop at first error and throw it."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "the masked string"
    },
    "throws": [
      {
        "types": [
          "MaskIsTooShortError"
        ],
        "description": ""
      },
      {
        "types": [
          "StringMaskError"
        ],
        "description": ""
      },
      {
        "types": [
          "MaskError"
        ],
        "description": ""
      }
    ]
  },
  {
    "kind": "index",
    "content": "# BBj Masks\n\n[![Build Status](https://travis-ci.com/BasisHub/bbj-masks.svg?branch=master)](https://travis-ci.com/BasisHub/bbj-masks)\n![GitHub](https://img.shields.io/github/license/BasisHub/bbj-masks)\n![GitHub file size in bytes](https://img.shields.io/github/size/BasisHub/bbj-masks/dist/bbj-masks.min.js)\n![GitHub tag (latest by date)](https://img.shields.io/github/v/tag/BasisHub/bbj-masks)\n![David](https://img.shields.io/david/BasisHub/bbj-masks)\n\n[Pages](https://basishub.github.io/bbj-masks/) | [API](https://basishub.github.io/bbj-masks/docs/api/) <br>\n\nA small library to format Javascript Dates , Numbers & Strings using BBj supported masks.\n\n## Browsers support\n\n|[<img src=\"https://raw.githubusercontent.com/alrra/browser-logos/master/src/edge/edge_48x48.png\" alt=\"IE / Edge\" width=\"24px\" height=\"24px\" />](http://godban.github.io/browsers-support-badges/)<br>IE / Edge | [<img src=\"https://raw.githubusercontent.com/alrra/browser-logos/master/src/firefox/firefox_48x48.png\" alt=\"Firefox\" width=\"24px\" height=\"24px\" />](http://godban.github.io/browsers-support-badges/)<br>Firefox | [<img src=\"https://raw.githubusercontent.com/alrra/browser-logos/master/src/chrome/chrome_48x48.png\" alt=\"Chrome\" width=\"24px\" height=\"24px\" />](http://godban.github.io/browsers-support-badges/)<br>Chrome | [<img src=\"https://raw.githubusercontent.com/alrra/browser-logos/master/src/safari/safari_48x48.png\" alt=\"Safari\" width=\"24px\" height=\"24px\" />](http://godban.github.io/browsers-support-badges/)<br>Safari | [<img src=\"https://raw.githubusercontent.com/alrra/browser-logos/master/src/opera/opera_48x48.png\" alt=\"Opera\" width=\"24px\" height=\"24px\" />](http://godban.github.io/browsers-support-badges/)<br>Opera |\n| :---------: | :---------: | :---------: | :---------: | :---------: |\n| IE11, Edge| last 2 versions| last 2 versions| last 2 versions| last 2 versions\n\n**Note :** To support IE11 browser include the [date-time-format-timezone](https://github.com/formatjs/date-time-format-timezone/) polyfill\n\n## Install\n\n```\n$ npm install BasisHub/bbj-masks\n$ yarn add BasisHub/bbj-masks\n```\n\n## Usage\n\n```js\nconst formattedNumber = BBj.Masks.Types.number(\n  -5000.123456789,\n  '$ -#,##0.######'\n) // -> $ -5,000.123457\n\nconst formattedDate = BBj.Masks.Types.date(\n  '2018-02-15T14:01:06Z',\n  '%Yz - %Mz - %Dz'\n) // -> 18 - 02 - 15\n\nconst formattedString = BBj.Masks.Types.string(\n  'abcdefg',\n  'XX-XXX-XX'\n) // -> ab-cde-fg\n```\n\n**With ES6 modules**\n\n```js\nimport Types , { NumberMask, DateMask, StringMask} from 'bbj-masks'\n\nTypes.number(-5000.123456789,'$ -#,##0.######') \nTypes.date('2018-02-15T14:01:06Z','%Yz - %Mz - %Dz')\nTypes.string('abcdefg','XX-XXX-XX')\n\nNumberMask.mask(-5000.123456789,'$ -#,##0.######') \n\nDateMask.mask('2018-02-15T14:01:06Z','%Yz - %Mz - %Dz') \n\nStringMask.mask('abcdefg','XX-XXX-XX') \n```\n\n## [Date Masks](https://documentation.basis.com/BASISHelp/WebHelp/commands/date_function_bbj.htm)\n\n| Mask | Supported | Description                                                                                                                                                                                                                        |\n| :--: | :-------: | :--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n|  %Y  |     ✓     | Year                                                                                                                                                                                                                               |\n|  %M  |     ✓     | Month                                                                                                                                                                                                                              |\n|  %D  |     ✓     | Day                                                                                                                                                                                                                                |\n|  %H  |     ✓     | Hour (24-hour clock)                                                                                                                                                                                                               |\n|  %h  |     ✓     | Hour (12-hour clock)                                                                                                                                                                                                               |\n|  %m  |     ✓     | Minute                                                                                                                                                                                                                             |\n|  %s  |     ✓     | Second                                                                                                                                                                                                                             |\n|  %t  |     ×     | Millisecond (thousandths of a second). Available in BBj 18.0 and higher.                                                                                                                                                           |\n|  %P  |     ✓     | AM/PM                                                                                                                                                                                                                              |\n|  %p  |     ✓     | am/pm                                                                                                                                                                                                                              |\n|  %J  |     ✓     | Day number within the year (1-366). (This format is unique to BBj.)                                                                                                                                                                |\n|  %W  |     ✓     | Day number within the week (1-7, Sunday=1). This format is unique to BBj.                                                                                                                                                          |\n|  %w  |     ✓     | Week number within the year (1-53, differs by locale)                                                                                                                                                                              |\n|  %d  |     ×     | Day number within the week (1-7, differs by locale). Available in BBj 16.0 and higher                                                                                                                                              |\n|  %y  |     ×     | Base year of the current week, available in BBj 16.0 and higher. The first few days of January may fall into the last week of the previous year. The last few days of December may fall into the first week of the following year. |\n\n| Modifier | Supported | Description                   |\n| :------: | :-------: | :---------------------------- |\n|    %z    |     ✓     | Zero-fill                     |\n|    %s    |     ✓     | Short text                    |\n|    %l    |     ✓     | Long text                     |\n|    %p    |     ✓     | Packed number (in CHR() form) |\n|    %d    |     ✓     | Decimal (default format)      |\n\n## [Number Masks](https://documentation.basis.com/BASISHelp/WebHelp/usr/numeric_output.htm)\n\n| Mask | Supported | Description                                                                                                                                                                                                                                                                                                                                                       |\n| :--: | :-------: | :---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n|  0   |     ✓     | A zero is always replaced by a digit(0..9).                                                                                                                                                                                                                                                                                                                       |\n|  #   |     ✓     | The pound sign is used to suppress leading zeroes. It is replaced by the fill character for leading zeroes to the left of the decimal point. For trailing zeros to the right of the decimal point it is replaced by a space or a zero (see [forceTrailingZeros option](https://basishub.github.io/bbj-masks/docs/api/class/src/NumberMask/NumberMask.js~NumberMask.html)). Any other time it is replaced by a digit. |\n|  ,   |     ✓     | To the left of the decimal point, the comma is replaced by the fill character if no digits have yet been placed. Any other time, it results in a comma.                                                                                                                                                                                                           |\n|  \\*  |     ✓     | The asterisk \"\\*\" is inserted into the number.                                                                                                                                                                                                                                                                                                                    |\n|  .   |     ✓     | The decimal point is replaced by a decimal point if any digits appear in the output mask. Otherwise, it is replaced by the fill character. After the decimal point, the fill character becomes a space.                                                                                                                                                           |\n|  \\$  |     ✓     | The dollar sign always results in a dollar sign.                                                                                                                                                                                                                                                                                                                  |\n|  (   |     ✓     | left parenthesis results in a \"(\" if the number is negative, or the fill character if positive.                                                                                                                                                                                                                                                                   |\n|  )   |     ✓     | A right parenthesis results in a \")\" if the number is negative, or the fill character if positive.                                                                                                                                                                                                                                                                |\n|  )   |     ✓     | A right parenthesis results in a \")\" if the number is negative, or the fill character if positive.                                                                                                                                                                                                                                                                |\n|  CR  |     ✓     | The characters \"CR\" are inserted into the number if the number is negative. Two spaces are inserted if the number is positive.                                                                                                                                                                                                                                    |\n|  DR  |     ✓     | The characters \"CR\" are inserted into the number if the number is negative. The characters \"DR\" are inserted if the number is positive.                                                                                                                                                                                                                           |\n|  B   |     ✓     | The upper case \"B\" always becomes a space. Any other character is simply copied to the result.positive.                                                                                                                                                                                                                                                           |\n\n## [String Masks](https://documentation.basis.com/BASISHelp/WebHelp/commands2/str_function.htm)\n\n| Mask | Supported | Description                                                                                                            |\n| :--: | :-------: | :--------------------------------------------------------------------------------------------------------------------- |\n|  X   |     ✓     | Any printable character.                                                                                               |\n|  a   |     ✓     | Any alphabetic character.                                                                                              |\n|  A   |     ✓     | Any alphabetic character. Converts lower-case alphabetic characters to upper case.\n|  0   |     ✓     | Any digit.                                                                                                             |\n|  z   |     ✓     | Any digit or alphabetic character.                                                                                     |\n|  Z   |     ✓     | Any digit or alphabetic character. Converts lower-case alphabetic characters to upper case.                            |\n|  U   |     ✓     | Any digit , alphabetic character , whitespace or punctuation. Converts lower-case alphabetic characters to upper case. |\n\n## License\n\nLicensed under the [MIT License](https://github.com/BasisHub/bbj-masks/blob/master/LICENSE).\n",
    "longname": "D:\\Github\\bbj-masks\\README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"bbj-masks\",\n  \"description\": \"A small library to format Javascript Dates , Numbers & Strings using BBj supported masks.\",\n  \"main\": \"src/index.js\",\n  \"version\": \"v1.0.0\",\n  \"private\": false,\n  \"scripts\": {\n    \"watch\": \"./node_modules/.bin/webpack --watch --progress\",\n    \"test:watch:node\": \"./node_modules/.bin/mocha-webpack \\\"./test/**/*.test.js\\\" --watch\",\n    \"test:watch:browser\": \"./node_modules/.bin/karma start --auto-watch --browsers ChromeHeadless,FirefoxHeadless karma.conf.js\",\n    \"test:watch\": \"./node_modules/.bin/concurrently --kill-others \\\"yarn test:watch:node\\\" \\\"yarn test:watch:browser\\\"\",\n    \"test:node\": \"./node_modules/.bin/mocha-webpack \\\"./test/**/*.test.js\\\"\",\n    \"test:browser\": \"./node_modules/.bin/karma start --single-run --browsers ChromeHeadless,FirefoxHeadless karma.conf.js\",\n    \"test\": \"yarn test:node && yarn test:browser\",\n    \"doc\": \"./node_modules/.bin/esdoc\",\n    \"build\": \"yarn test && yarn doc && ./node_modules/.bin/webpack\"\n  },\n  \"devDependencies\": {\n    \"@babel/core\": \"^7.0.0-beta.40\",\n    \"@babel/preset-env\": \"^7.0.0-beta.40\",\n    \"babel-loader\": \"8.0.0-beta.0\",\n    \"bumped\": \"^0.12.2\",\n    \"chai\": \"^4.2.0\",\n    \"concurrently\": \"^5.0.2\",\n    \"esdoc\": \"^1.1.0\",\n    \"esdoc-standard-plugin\": \"^1.0.0\",\n    \"karma\": \"^4.4.1\",\n    \"karma-babel-preprocessor\": \"^8.0.1\",\n    \"karma-chai\": \"^0.1.0\",\n    \"karma-chrome-launcher\": \"^3.1.0\",\n    \"karma-edge-launcher\": \"^0.4.2\",\n    \"karma-firefox-launcher\": \"^1.3.0\",\n    \"karma-ie-launcher\": \"^1.0.0\",\n    \"karma-mocha\": \"^1.3.0\",\n    \"karma-mocha-reporter\": \"^2.2.5\",\n    \"karma-sourcemap-loader\": \"^0.3.7\",\n    \"karma-spec-reporter\": \"^0.0.32\",\n    \"mocha\": \"^5.0.1\",\n    \"mocha-webpack\": \"^1.0.1\",\n    \"uglifyjs-webpack-plugin\": \"^1.1.8\",\n    \"webpack\": \"^3.11.0\",\n    \"webpack-bundle-analyzer\": \"^3.6.0\"\n  },\n  \"dependencies\": {\n    \"date-fns\": \"^2.8.1\",\n    \"date-fns-tz\": \"^1.0.8\",\n    \"weekstart\": \"^1.0.1\"\n  }\n}\n",
    "longname": "D:\\Github\\bbj-masks\\package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]
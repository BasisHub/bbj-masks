{"version":3,"file":"number-mask.js","mappings":"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","sources":["webpack://bbj-masks/webpack/universalModuleDefinition","webpack://bbj-masks/./src/NumberMask/NumberMask.js","webpack://bbj-masks/webpack/bootstrap","webpack://bbj-masks/webpack/runtime/define property getters","webpack://bbj-masks/webpack/runtime/hasOwnProperty shorthand","webpack://bbj-masks/webpack/runtime/make namespace object","webpack://bbj-masks/./src/NumberMask/index.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"BBj\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"BBj\"] = factory();\n\telse\n\t\troot[\"BBj\"] = root[\"BBj\"] || {}, root[\"BBj\"][\"Masks\"] = root[\"BBj\"][\"Masks\"] || {}, root[\"BBj\"][\"Masks\"][\"Number\"] = factory();\n})((typeof self !== 'undefined' ? self : this), () => {\nreturn ","/*\n * This file is part of bbj-masks lib.\n * (c) Basis Europe <eu@basis.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\n/**\n * NumberMask\n *\n * A javascript implementation for BBj numbers masking\n *\n * @author Hyyan Abo Fakher <habofakher@basis.com>\n */\nclass NumberMask {\n  /**\n   * Mask the given number with the given mask according to BBj rules\n   *\n   * @param {Number} number the number to format\n   * @param {String} mask the mask to use for formatting\n   * @param {String} [groupingSeparator=,] - a char which will be used as a grouping separator\n   * @param {String} [decimalSeparator=.]  - a char which will be used as a decimal separator\n   * @param {Boolean} [forceTrailingZeros=false] - Affects the output by switching the way a mask with \"#\" characters in the trailing positions is filled.\n   *                                              for example, the function `NumberMask.mask(.10:\"#.##\")` returns ` .10` instead of ` .1 `\n   * @param {Boolean} [loose=true] when true , errors will be ignored and the method will try at apply the mask\n   *                anyway , otherwise it will stop at first error and throw it.\n   * @param {Boolean} [ignoreFillChar=false] - when true , then the fill char will always be an empty space \n   *                                         event if the mask start with a `*` \n   * @param {Boolean} [trimSpaces=false] - When true , the final masked value will not contain any spaces \n   * @param {Boolean} [floatSpecialChars=true] - When true , then if any of  \"-\", \"+\", \"$\", and \"(\".  characters \n   *                                            is present in the mask, the first one encountered will be moved\n   *                                            to the last position where a \"#\" or \",\" was replaced by the fill\n   *                                            character. If no such position exists, the float character is \n   *                                            left where it\n   * \n   * @throws {MaskError} only if loose is disabled\n   * \n   * @returns {String} the masked number\n   */\n  static mask(\n    number,\n    mask,\n    groupingSeparator = ',',\n    decimalSeparator = '.',\n    forceTrailingZeros = false,\n    loose = true,\n    ignoreFillChar = false,\n    trimSpaces = false,\n    floatSpecialChars = true\n  ) {\n    const maskLen = mask.length\n    if (0 === maskLen) {\n      if (loose) return str\n      // friendly silent fail\n      else\n        throw {\n          name: 'MaskError',\n          message: `MaskError: Mask is empty`\n        }\n    }\n\n    // Get magnitude and precision of MASK\n    let maskBeforeDecimal = 0\n    let maskAfterDecimal = 0\n    let foundDecimal = false\n    for (let i = 0; i < maskLen; ++i) {\n      const m = mask.charAt(i)\n      if (m == '0' || m == '#') {\n        if (foundDecimal) ++maskAfterDecimal\n        else ++maskBeforeDecimal\n      } else if (m == '.') foundDecimal = true\n    }\n\n    let num = NumberMask._round(number, maskAfterDecimal)\n    let bytes = NumberMask._toCharArray(num)\n\n    // Get magnitude and precision of NUMBER\n    let inLen = bytes.length\n    let numBeforeDecimal = 0\n    let numAfterDecimal = 0\n    foundDecimal = false\n    for (let i = 0; i < inLen; ++i) {\n      if (bytes[i] == '.') foundDecimal = true\n      else {\n        if (foundDecimal) ++numAfterDecimal\n        else ++numBeforeDecimal\n      }\n    }\n\n    // always ignore mask overflow\n    if (numBeforeDecimal > maskBeforeDecimal) {\n      if (loose) return number.toString()\n      // friendly silent fail\n      else\n        throw {\n          name: 'MaskError',\n          message: `MaskError: Number is too large for mask`\n        }\n    }\n\n    // round if mask is for a lower precision number\n    if (numAfterDecimal > maskAfterDecimal) {\n      num = NumberMask._round(num, maskAfterDecimal)\n      bytes = NumberMask._toCharArray(num)\n      inLen = bytes.length\n\n      // Get new magnitude and precision of NUMBER\n      numBeforeDecimal = 0\n      numAfterDecimal = 0\n      foundDecimal = false\n      for (let i = 0; i < inLen; ++i) {\n        if (bytes[i] == '.') foundDecimal = true\n        else {\n          if (foundDecimal) ++numAfterDecimal\n          else ++numBeforeDecimal\n        }\n      }\n\n      // always ignore mask overflow\n      if (numBeforeDecimal > maskBeforeDecimal) {\n        if (loose) return number.toString()\n        // friendly silent fail\n        else\n          throw {\n            name: 'MaskError',\n            message: `MaskError: Number is too large for mask`\n          }\n      }\n    }\n\n    let fillByte = ' ',\n      floatByte = ' '\n    let inPos = 0,\n      outPos = 0,\n      floatPos = 0\n    if (mask.charAt(0) == '*' && ignoreFillChar === false) fillByte = '*'\n\n    const fillInit = fillByte\n    const isNegative = NumberMask._getSign(num) < 0\n    let emitDecimal = inLen > 0 || mask.indexOf('0') >= 0\n    let foundZero = false\n    let foundDigit = false\n    foundDecimal = false\n\n    let ret = new Array(maskLen)\n\n    for (let maskPos = 0; maskPos < maskLen; ++maskPos) {\n      let m = mask.charAt(maskPos)\n      switch (m) {\n        case '0':\n          --maskBeforeDecimal\n          if (maskBeforeDecimal < numBeforeDecimal && inPos < inLen) {\n            ret[outPos] = bytes[inPos]\n            ++inPos\n            foundDigit = true\n          } else {\n            ret[outPos] = '0'\n            foundZero = true\n          }\n          ++outPos\n          break\n\n        case '#':\n          --maskBeforeDecimal\n          if (maskBeforeDecimal < numBeforeDecimal && inPos < inLen) {\n            ret[outPos] = bytes[inPos]\n            ++inPos\n            foundDigit = true\n          } else {\n            ret[outPos] =\n              foundDecimal &&\n                forceTrailingZeros &&\n                NumberMask._getSign(num) != 0\n                ? '0'\n                : fillByte\n            if (!foundDecimal) floatPos = maskPos\n          }\n          ++outPos\n          break\n\n        case ',':\n          if (foundZero || inPos > 0) ret[outPos] = groupingSeparator\n          else {\n            ret[outPos] = fillByte\n            if (!foundDecimal) floatPos = maskPos\n          }\n          ++outPos\n          break\n\n        case '-':\n          if (!foundDigit && (floatByte == ' ' && floatSpecialChars)) {\n            if (isNegative) floatByte = '-'\n            ret[outPos] = fillByte\n            floatPos = foundDecimal ? -1 : maskPos\n          } else ret[outPos] = isNegative ? '-' : fillByte\n          ++outPos\n          break\n\n        case '+':\n          if (!foundDigit && (floatByte == ' ' && floatSpecialChars)) {\n            floatByte = isNegative ? '-' : '+'\n            ret[outPos] = fillByte\n            floatPos = foundDecimal ? -1 : maskPos\n          } else ret[outPos] = isNegative ? '-' : '+'\n          ++outPos\n          break\n\n        case '$':\n          if (!foundDigit && (floatByte == ' ' && floatSpecialChars)) {\n            floatByte = '$'\n            ret[outPos] = fillByte\n            floatPos = foundDecimal ? -1 : maskPos\n          } else {\n            ret[outPos] = '$'\n          }\n          // ret[outPos] = '$'\n          ++outPos\n          break\n\n        case '(':\n          if (!foundDigit && (floatByte == ' ') && floatSpecialChars) {\n            if (isNegative) floatByte = '('\n            ret[outPos] = fillByte\n            floatPos = foundDecimal ? -1 : maskPos\n          } else {\n            if (isNegative) {\n              ret[outPos] = '('\n            } else {\n              ret[outPos] = foundDecimal ? ' ' : fillByte\n            }\n          }\n\n          // if(floatSpecialChars) {\n          //   if (!foundDigit && (floatByte == ' ')) {\n          //     if (isNegative) floatByte = '('\n          //     ret[outPos] = fillByte\n          //     floatPos = foundDecimal ? -1 : maskPos\n          //   } else {\n          //     if (isNegative) {\n          //       ret[outPos] = '('\n          //     } else {\n          //       ret[outPos] = foundDecimal ? ' ' : fillByte\n          //     }\n          //   }\n          // } else {\n          //   ret[outPos] = '('\n          // }\n\n          ++outPos\n          break\n\n        case ')':\n          if (isNegative) {\n            ret[outPos] = ')'\n          } else {\n            ret[outPos] = foundDecimal ? ' ' : fillByte\n          }\n          \n          // if(floatSpecialChars) {\n          //   if (isNegative) {\n          //     ret[outPos] = ')'\n          //   } else {\n          //     ret[outPos] = foundDecimal ? ' ' : fillByte\n          //   }\n          // } else {\n          //   ret[outPos] = ')'\n          // }\n          \n          ++outPos\n          break\n\n        case 'C':\n          if (maskPos < maskLen - 1 && mask.charAt(maskPos + 1) == 'R') {\n            if (isNegative) {\n              ret[outPos] = 'C'\n              ret[outPos + 1] = 'R'\n            } else {\n              ret[outPos] = ' '\n              ret[outPos + 1] = ' '\n            }\n            outPos += 2\n            ++maskPos\n          } else {\n            ret[outPos] = 'C'\n            ++outPos\n          }\n          break\n        case 'D':\n          if (maskPos < maskLen - 1 && mask.charAt(maskPos + 1) == 'R') {\n            if (isNegative) {\n              ret[outPos] = 'C'\n              ret[outPos + 1] = 'R'\n            } else {\n              ret[outPos] = 'D'\n              ret[outPos + 1] = 'R'\n            }\n            outPos += 2\n            ++maskPos\n          } else {\n            ret[outPos] = 'D'\n            ++outPos\n          }\n          break\n\n        case '*':\n          ret[outPos] = '*'\n          ++outPos\n          break\n\n        case '.':\n          ret[outPos] = emitDecimal ? decimalSeparator : fillByte\n          fillByte = ' '\n          foundDecimal = true\n          ++inPos\n          ++outPos\n          break\n\n        case 'B':\n          ret[outPos] = ' '\n          ++outPos\n          break\n\n        default:\n          ret[outPos] = m\n          ++outPos\n          break\n      }\n    }\n\n    if (floatByte != ' ') {\n      if (floatPos < 0) floatPos = outPos\n      while (floatPos >= maskLen) --floatPos\n      if (ret[floatPos] == fillInit) ret[floatPos] = floatByte\n    }\n\n    ret = ret.join('')\n\n    if (trimSpaces) ret = ret.replace(/\\s/g, '')\n\n    return ret\n  }\n\n  static _shift(number, precision, reverseShift) {\n    if (reverseShift) precision = -precision\n    var numArray = ('' + number).split('e')\n    return +(\n      numArray[0] +\n      'e' +\n      (numArray[1] ? +numArray[1] + precision : precision)\n    )\n  }\n\n  static _round(number, precision) {\n    return NumberMask._shift(\n      Math.round(NumberMask._shift(number, precision, false)),\n      precision,\n      true\n    )\n  }\n\n  static _toCharArray(number) {\n    const signum = NumberMask._getSign(number)\n    let chars = []\n\n    if (signum !== 0) {\n      let string = signum < 0 ? `${-1 * number.toString()}` : number.toString()\n\n      if (string.length > 1 && string.charAt(0) == '0')\n        string = string.substring(1)\n\n      // The string contains only [0-9] and '.'\n      chars = string.split('')\n    }\n\n    return chars\n  }\n\n  /**\n   * Returns the sign of a number\n   *\n   * @param {Number} x number\n   * @returns {Number} A number representing the sign of the given argument.\n   *                   If the argument is a positive number, negative number, positive zero\n   *                   or negative zero, the function will return 1, -1, 0 or -0 respectively.\n   *                   Otherwise, NaN is returned.\n   */\n  static _getSign(x) {\n    return (x > 0) - (x < 0) || +x\n  }\n}\n\nexport default NumberMask\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/*\n * This file is part of bbj-masks lib.\n * (c) Basis Europe <eu@basis.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport NumberMask from './NumberMask'\n\nexport default NumberMask\n"],"names":["NumberMask","number","mask","groupingSeparator","decimalSeparator","forceTrailingZeros","loose","ignoreFillChar","trimSpaces","floatSpecialChars","maskLen","length","str","name","message","maskBeforeDecimal","maskAfterDecimal","foundDecimal","i","m","charAt","num","_round","bytes","_toCharArray","inLen","numBeforeDecimal","numAfterDecimal","toString","fillByte","floatByte","inPos","outPos","floatPos","fillInit","isNegative","_getSign","emitDecimal","indexOf","foundZero","foundDigit","ret","Array","maskPos","join","replace","precision","reverseShift","numArray","split","_shift","Math","round","signum","chars","string","substring","x"],"sourceRoot":""}